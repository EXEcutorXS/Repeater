
Repeater.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080027b0  080027b0  000127b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027dc  080027dc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080027dc  080027dc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027dc  080027dc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027dc  080027dc  000127dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027e0  080027e0  000127e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080027e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  2000000c  080027f0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  080027f0  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e008  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e06  00000000  00000000  0002e03d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008c8  00000000  00000000  0002fe48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000800  00000000  00000000  00030710  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014f37  00000000  00000000  00030f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000816a  00000000  00000000  00045e47  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006d73b  00000000  00000000  0004dfb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bb6ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022fc  00000000  00000000  000bb768  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002798 	.word	0x08002798

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002798 	.word	0x08002798

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f929 	bl	80003b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 f99e 	bl	80024a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f933 	bl	8000402 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f909 	bl	80003ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000028 	.word	0x20000028

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000028 	.word	0x20000028

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	6039      	str	r1, [r7, #0]
 80002c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80002c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da0b      	bge.n	80002e4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	b2da      	uxtb	r2, r3
 80002d0:	490c      	ldr	r1, [pc, #48]	; (8000304 <NVIC_SetPriority+0x4c>)
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	f003 030f 	and.w	r3, r3, #15
 80002d8:	3b04      	subs	r3, #4
 80002da:	0112      	lsls	r2, r2, #4
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	440b      	add	r3, r1
 80002e0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e2:	e009      	b.n	80002f8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	b2da      	uxtb	r2, r3
 80002e8:	4907      	ldr	r1, [pc, #28]	; (8000308 <NVIC_SetPriority+0x50>)
 80002ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ee:	0112      	lsls	r2, r2, #4
 80002f0:	b2d2      	uxtb	r2, r2
 80002f2:	440b      	add	r3, r1
 80002f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	e000ed00 	.word	0xe000ed00
 8000308:	e000e100 	.word	0xe000e100

0800030c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800030c:	b480      	push	{r7}
 800030e:	b089      	sub	sp, #36	; 0x24
 8000310:	af00      	add	r7, sp, #0
 8000312:	60f8      	str	r0, [r7, #12]
 8000314:	60b9      	str	r1, [r7, #8]
 8000316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	f003 0307 	and.w	r3, r3, #7
 800031e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000320:	69fb      	ldr	r3, [r7, #28]
 8000322:	f1c3 0307 	rsb	r3, r3, #7
 8000326:	2b04      	cmp	r3, #4
 8000328:	bf28      	it	cs
 800032a:	2304      	movcs	r3, #4
 800032c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800032e:	69fb      	ldr	r3, [r7, #28]
 8000330:	3304      	adds	r3, #4
 8000332:	2b06      	cmp	r3, #6
 8000334:	d902      	bls.n	800033c <NVIC_EncodePriority+0x30>
 8000336:	69fb      	ldr	r3, [r7, #28]
 8000338:	3b03      	subs	r3, #3
 800033a:	e000      	b.n	800033e <NVIC_EncodePriority+0x32>
 800033c:	2300      	movs	r3, #0
 800033e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000340:	f04f 32ff 	mov.w	r2, #4294967295
 8000344:	69bb      	ldr	r3, [r7, #24]
 8000346:	fa02 f303 	lsl.w	r3, r2, r3
 800034a:	43da      	mvns	r2, r3
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	401a      	ands	r2, r3
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000354:	f04f 31ff 	mov.w	r1, #4294967295
 8000358:	697b      	ldr	r3, [r7, #20]
 800035a:	fa01 f303 	lsl.w	r3, r1, r3
 800035e:	43d9      	mvns	r1, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000364:	4313      	orrs	r3, r2
         );
}
 8000366:	4618      	mov	r0, r3
 8000368:	3724      	adds	r7, #36	; 0x24
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr

08000370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	3b01      	subs	r3, #1
 800037c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000380:	d301      	bcc.n	8000386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000382:	2301      	movs	r3, #1
 8000384:	e00f      	b.n	80003a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000386:	4a0a      	ldr	r2, [pc, #40]	; (80003b0 <SysTick_Config+0x40>)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	3b01      	subs	r3, #1
 800038c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800038e:	210f      	movs	r1, #15
 8000390:	f04f 30ff 	mov.w	r0, #4294967295
 8000394:	f7ff ff90 	bl	80002b8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <SysTick_Config+0x40>)
 800039a:	2200      	movs	r2, #0
 800039c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800039e:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <SysTick_Config+0x40>)
 80003a0:	2207      	movs	r2, #7
 80003a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003a4:	2300      	movs	r3, #0
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	e000e010 	.word	0xe000e010

080003b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003bc:	6878      	ldr	r0, [r7, #4]
 80003be:	f7ff ff49 	bl	8000254 <NVIC_SetPriorityGrouping>
}
 80003c2:	bf00      	nop
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}

080003ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003ca:	b580      	push	{r7, lr}
 80003cc:	b086      	sub	sp, #24
 80003ce:	af00      	add	r7, sp, #0
 80003d0:	4603      	mov	r3, r0
 80003d2:	60b9      	str	r1, [r7, #8]
 80003d4:	607a      	str	r2, [r7, #4]
 80003d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003d8:	2300      	movs	r3, #0
 80003da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003dc:	f7ff ff5e 	bl	800029c <NVIC_GetPriorityGrouping>
 80003e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003e2:	687a      	ldr	r2, [r7, #4]
 80003e4:	68b9      	ldr	r1, [r7, #8]
 80003e6:	6978      	ldr	r0, [r7, #20]
 80003e8:	f7ff ff90 	bl	800030c <NVIC_EncodePriority>
 80003ec:	4602      	mov	r2, r0
 80003ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003f2:	4611      	mov	r1, r2
 80003f4:	4618      	mov	r0, r3
 80003f6:	f7ff ff5f 	bl	80002b8 <NVIC_SetPriority>
}
 80003fa:	bf00      	nop
 80003fc:	3718      	adds	r7, #24
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000402:	b580      	push	{r7, lr}
 8000404:	b082      	sub	sp, #8
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800040a:	6878      	ldr	r0, [r7, #4]
 800040c:	f7ff ffb0 	bl	8000370 <SysTick_Config>
 8000410:	4603      	mov	r3, r0
}
 8000412:	4618      	mov	r0, r3
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800041c:	b480      	push	{r7}
 800041e:	b08b      	sub	sp, #44	; 0x2c
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000426:	2300      	movs	r3, #0
 8000428:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800042a:	2300      	movs	r3, #0
 800042c:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 800042e:	2300      	movs	r3, #0
 8000430:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000432:	2300      	movs	r3, #0
 8000434:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000436:	2300      	movs	r3, #0
 8000438:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800043a:	2300      	movs	r3, #0
 800043c:	627b      	str	r3, [r7, #36]	; 0x24
 800043e:	e127      	b.n	8000690 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000440:	2201      	movs	r2, #1
 8000442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000444:	fa02 f303 	lsl.w	r3, r2, r3
 8000448:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	69fa      	ldr	r2, [r7, #28]
 8000450:	4013      	ands	r3, r2
 8000452:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000454:	69ba      	ldr	r2, [r7, #24]
 8000456:	69fb      	ldr	r3, [r7, #28]
 8000458:	429a      	cmp	r2, r3
 800045a:	f040 8116 	bne.w	800068a <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	2b12      	cmp	r3, #18
 8000464:	d034      	beq.n	80004d0 <HAL_GPIO_Init+0xb4>
 8000466:	2b12      	cmp	r3, #18
 8000468:	d80d      	bhi.n	8000486 <HAL_GPIO_Init+0x6a>
 800046a:	2b02      	cmp	r3, #2
 800046c:	d02b      	beq.n	80004c6 <HAL_GPIO_Init+0xaa>
 800046e:	2b02      	cmp	r3, #2
 8000470:	d804      	bhi.n	800047c <HAL_GPIO_Init+0x60>
 8000472:	2b00      	cmp	r3, #0
 8000474:	d031      	beq.n	80004da <HAL_GPIO_Init+0xbe>
 8000476:	2b01      	cmp	r3, #1
 8000478:	d01c      	beq.n	80004b4 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800047a:	e048      	b.n	800050e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800047c:	2b03      	cmp	r3, #3
 800047e:	d043      	beq.n	8000508 <HAL_GPIO_Init+0xec>
 8000480:	2b11      	cmp	r3, #17
 8000482:	d01b      	beq.n	80004bc <HAL_GPIO_Init+0xa0>
          break;
 8000484:	e043      	b.n	800050e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000486:	4a87      	ldr	r2, [pc, #540]	; (80006a4 <HAL_GPIO_Init+0x288>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d026      	beq.n	80004da <HAL_GPIO_Init+0xbe>
 800048c:	4a85      	ldr	r2, [pc, #532]	; (80006a4 <HAL_GPIO_Init+0x288>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d806      	bhi.n	80004a0 <HAL_GPIO_Init+0x84>
 8000492:	4a85      	ldr	r2, [pc, #532]	; (80006a8 <HAL_GPIO_Init+0x28c>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d020      	beq.n	80004da <HAL_GPIO_Init+0xbe>
 8000498:	4a84      	ldr	r2, [pc, #528]	; (80006ac <HAL_GPIO_Init+0x290>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d01d      	beq.n	80004da <HAL_GPIO_Init+0xbe>
          break;
 800049e:	e036      	b.n	800050e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80004a0:	4a83      	ldr	r2, [pc, #524]	; (80006b0 <HAL_GPIO_Init+0x294>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d019      	beq.n	80004da <HAL_GPIO_Init+0xbe>
 80004a6:	4a83      	ldr	r2, [pc, #524]	; (80006b4 <HAL_GPIO_Init+0x298>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d016      	beq.n	80004da <HAL_GPIO_Init+0xbe>
 80004ac:	4a82      	ldr	r2, [pc, #520]	; (80006b8 <HAL_GPIO_Init+0x29c>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d013      	beq.n	80004da <HAL_GPIO_Init+0xbe>
          break;
 80004b2:	e02c      	b.n	800050e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	68db      	ldr	r3, [r3, #12]
 80004b8:	623b      	str	r3, [r7, #32]
          break;
 80004ba:	e028      	b.n	800050e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	3304      	adds	r3, #4
 80004c2:	623b      	str	r3, [r7, #32]
          break;
 80004c4:	e023      	b.n	800050e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	68db      	ldr	r3, [r3, #12]
 80004ca:	3308      	adds	r3, #8
 80004cc:	623b      	str	r3, [r7, #32]
          break;
 80004ce:	e01e      	b.n	800050e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	330c      	adds	r3, #12
 80004d6:	623b      	str	r3, [r7, #32]
          break;
 80004d8:	e019      	b.n	800050e <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	689b      	ldr	r3, [r3, #8]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d102      	bne.n	80004e8 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80004e2:	2304      	movs	r3, #4
 80004e4:	623b      	str	r3, [r7, #32]
          break;
 80004e6:	e012      	b.n	800050e <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	689b      	ldr	r3, [r3, #8]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d105      	bne.n	80004fc <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004f0:	2308      	movs	r3, #8
 80004f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	69fa      	ldr	r2, [r7, #28]
 80004f8:	611a      	str	r2, [r3, #16]
          break;
 80004fa:	e008      	b.n	800050e <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004fc:	2308      	movs	r3, #8
 80004fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	69fa      	ldr	r2, [r7, #28]
 8000504:	615a      	str	r2, [r3, #20]
          break;
 8000506:	e002      	b.n	800050e <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000508:	2300      	movs	r3, #0
 800050a:	623b      	str	r3, [r7, #32]
          break;
 800050c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800050e:	69bb      	ldr	r3, [r7, #24]
 8000510:	2bff      	cmp	r3, #255	; 0xff
 8000512:	d801      	bhi.n	8000518 <HAL_GPIO_Init+0xfc>
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	e001      	b.n	800051c <HAL_GPIO_Init+0x100>
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	3304      	adds	r3, #4
 800051c:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800051e:	69bb      	ldr	r3, [r7, #24]
 8000520:	2bff      	cmp	r3, #255	; 0xff
 8000522:	d802      	bhi.n	800052a <HAL_GPIO_Init+0x10e>
 8000524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	e002      	b.n	8000530 <HAL_GPIO_Init+0x114>
 800052a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800052c:	3b08      	subs	r3, #8
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	210f      	movs	r1, #15
 8000538:	693b      	ldr	r3, [r7, #16]
 800053a:	fa01 f303 	lsl.w	r3, r1, r3
 800053e:	43db      	mvns	r3, r3
 8000540:	401a      	ands	r2, r3
 8000542:	6a39      	ldr	r1, [r7, #32]
 8000544:	693b      	ldr	r3, [r7, #16]
 8000546:	fa01 f303 	lsl.w	r3, r1, r3
 800054a:	431a      	orrs	r2, r3
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	2b00      	cmp	r3, #0
 800055a:	f000 8096 	beq.w	800068a <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800055e:	4b57      	ldr	r3, [pc, #348]	; (80006bc <HAL_GPIO_Init+0x2a0>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	4a56      	ldr	r2, [pc, #344]	; (80006bc <HAL_GPIO_Init+0x2a0>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	6193      	str	r3, [r2, #24]
 800056a:	4b54      	ldr	r3, [pc, #336]	; (80006bc <HAL_GPIO_Init+0x2a0>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000576:	4a52      	ldr	r2, [pc, #328]	; (80006c0 <HAL_GPIO_Init+0x2a4>)
 8000578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800057a:	089b      	lsrs	r3, r3, #2
 800057c:	3302      	adds	r3, #2
 800057e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000582:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000586:	f003 0303 	and.w	r3, r3, #3
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	220f      	movs	r2, #15
 800058e:	fa02 f303 	lsl.w	r3, r2, r3
 8000592:	43db      	mvns	r3, r3
 8000594:	697a      	ldr	r2, [r7, #20]
 8000596:	4013      	ands	r3, r2
 8000598:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a49      	ldr	r2, [pc, #292]	; (80006c4 <HAL_GPIO_Init+0x2a8>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d013      	beq.n	80005ca <HAL_GPIO_Init+0x1ae>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a48      	ldr	r2, [pc, #288]	; (80006c8 <HAL_GPIO_Init+0x2ac>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d00d      	beq.n	80005c6 <HAL_GPIO_Init+0x1aa>
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4a47      	ldr	r2, [pc, #284]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d007      	beq.n	80005c2 <HAL_GPIO_Init+0x1a6>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4a46      	ldr	r2, [pc, #280]	; (80006d0 <HAL_GPIO_Init+0x2b4>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d101      	bne.n	80005be <HAL_GPIO_Init+0x1a2>
 80005ba:	2303      	movs	r3, #3
 80005bc:	e006      	b.n	80005cc <HAL_GPIO_Init+0x1b0>
 80005be:	2304      	movs	r3, #4
 80005c0:	e004      	b.n	80005cc <HAL_GPIO_Init+0x1b0>
 80005c2:	2302      	movs	r3, #2
 80005c4:	e002      	b.n	80005cc <HAL_GPIO_Init+0x1b0>
 80005c6:	2301      	movs	r3, #1
 80005c8:	e000      	b.n	80005cc <HAL_GPIO_Init+0x1b0>
 80005ca:	2300      	movs	r3, #0
 80005cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005ce:	f002 0203 	and.w	r2, r2, #3
 80005d2:	0092      	lsls	r2, r2, #2
 80005d4:	4093      	lsls	r3, r2
 80005d6:	697a      	ldr	r2, [r7, #20]
 80005d8:	4313      	orrs	r3, r2
 80005da:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80005dc:	4938      	ldr	r1, [pc, #224]	; (80006c0 <HAL_GPIO_Init+0x2a4>)
 80005de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e0:	089b      	lsrs	r3, r3, #2
 80005e2:	3302      	adds	r3, #2
 80005e4:	697a      	ldr	r2, [r7, #20]
 80005e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d006      	beq.n	8000604 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80005f6:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	4936      	ldr	r1, [pc, #216]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 80005fc:	69bb      	ldr	r3, [r7, #24]
 80005fe:	4313      	orrs	r3, r2
 8000600:	600b      	str	r3, [r1, #0]
 8000602:	e006      	b.n	8000612 <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000604:	4b33      	ldr	r3, [pc, #204]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	69bb      	ldr	r3, [r7, #24]
 800060a:	43db      	mvns	r3, r3
 800060c:	4931      	ldr	r1, [pc, #196]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 800060e:	4013      	ands	r3, r2
 8000610:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061a:	2b00      	cmp	r3, #0
 800061c:	d006      	beq.n	800062c <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800061e:	4b2d      	ldr	r3, [pc, #180]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 8000620:	685a      	ldr	r2, [r3, #4]
 8000622:	492c      	ldr	r1, [pc, #176]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 8000624:	69bb      	ldr	r3, [r7, #24]
 8000626:	4313      	orrs	r3, r2
 8000628:	604b      	str	r3, [r1, #4]
 800062a:	e006      	b.n	800063a <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800062c:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 800062e:	685a      	ldr	r2, [r3, #4]
 8000630:	69bb      	ldr	r3, [r7, #24]
 8000632:	43db      	mvns	r3, r3
 8000634:	4927      	ldr	r1, [pc, #156]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 8000636:	4013      	ands	r3, r2
 8000638:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000642:	2b00      	cmp	r3, #0
 8000644:	d006      	beq.n	8000654 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000646:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 8000648:	689a      	ldr	r2, [r3, #8]
 800064a:	4922      	ldr	r1, [pc, #136]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	4313      	orrs	r3, r2
 8000650:	608b      	str	r3, [r1, #8]
 8000652:	e006      	b.n	8000662 <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 8000656:	689a      	ldr	r2, [r3, #8]
 8000658:	69bb      	ldr	r3, [r7, #24]
 800065a:	43db      	mvns	r3, r3
 800065c:	491d      	ldr	r1, [pc, #116]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 800065e:	4013      	ands	r3, r2
 8000660:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800066a:	2b00      	cmp	r3, #0
 800066c:	d006      	beq.n	800067c <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800066e:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 8000670:	68da      	ldr	r2, [r3, #12]
 8000672:	4918      	ldr	r1, [pc, #96]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 8000674:	69bb      	ldr	r3, [r7, #24]
 8000676:	4313      	orrs	r3, r2
 8000678:	60cb      	str	r3, [r1, #12]
 800067a:	e006      	b.n	800068a <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 800067e:	68da      	ldr	r2, [r3, #12]
 8000680:	69bb      	ldr	r3, [r7, #24]
 8000682:	43db      	mvns	r3, r3
 8000684:	4913      	ldr	r1, [pc, #76]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 8000686:	4013      	ands	r3, r2
 8000688:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800068a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068c:	3301      	adds	r3, #1
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
 8000690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000692:	2b0f      	cmp	r3, #15
 8000694:	f67f aed4 	bls.w	8000440 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000698:	bf00      	nop
 800069a:	372c      	adds	r7, #44	; 0x2c
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	10210000 	.word	0x10210000
 80006a8:	10110000 	.word	0x10110000
 80006ac:	10120000 	.word	0x10120000
 80006b0:	10310000 	.word	0x10310000
 80006b4:	10320000 	.word	0x10320000
 80006b8:	10220000 	.word	0x10220000
 80006bc:	40021000 	.word	0x40021000
 80006c0:	40010000 	.word	0x40010000
 80006c4:	40010800 	.word	0x40010800
 80006c8:	40010c00 	.word	0x40010c00
 80006cc:	40011000 	.word	0x40011000
 80006d0:	40011400 	.word	0x40011400
 80006d4:	40010400 	.word	0x40010400

080006d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	460b      	mov	r3, r1
 80006e2:	807b      	strh	r3, [r7, #2]
 80006e4:	4613      	mov	r3, r2
 80006e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80006e8:	787b      	ldrb	r3, [r7, #1]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d003      	beq.n	80006f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80006ee:	887a      	ldrh	r2, [r7, #2]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80006f4:	e003      	b.n	80006fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80006f6:	887b      	ldrh	r3, [r7, #2]
 80006f8:	041a      	lsls	r2, r3, #16
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	611a      	str	r2, [r3, #16]
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr

08000708 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000710:	2300      	movs	r3, #0
 8000712:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f003 0301 	and.w	r3, r3, #1
 800071c:	2b00      	cmp	r3, #0
 800071e:	f000 8087 	beq.w	8000830 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000722:	4b92      	ldr	r3, [pc, #584]	; (800096c <HAL_RCC_OscConfig+0x264>)
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	f003 030c 	and.w	r3, r3, #12
 800072a:	2b04      	cmp	r3, #4
 800072c:	d00c      	beq.n	8000748 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800072e:	4b8f      	ldr	r3, [pc, #572]	; (800096c <HAL_RCC_OscConfig+0x264>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	f003 030c 	and.w	r3, r3, #12
 8000736:	2b08      	cmp	r3, #8
 8000738:	d112      	bne.n	8000760 <HAL_RCC_OscConfig+0x58>
 800073a:	4b8c      	ldr	r3, [pc, #560]	; (800096c <HAL_RCC_OscConfig+0x264>)
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000746:	d10b      	bne.n	8000760 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000748:	4b88      	ldr	r3, [pc, #544]	; (800096c <HAL_RCC_OscConfig+0x264>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000750:	2b00      	cmp	r3, #0
 8000752:	d06c      	beq.n	800082e <HAL_RCC_OscConfig+0x126>
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d168      	bne.n	800082e <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 800075c:	2301      	movs	r3, #1
 800075e:	e22d      	b.n	8000bbc <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000768:	d106      	bne.n	8000778 <HAL_RCC_OscConfig+0x70>
 800076a:	4b80      	ldr	r3, [pc, #512]	; (800096c <HAL_RCC_OscConfig+0x264>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a7f      	ldr	r2, [pc, #508]	; (800096c <HAL_RCC_OscConfig+0x264>)
 8000770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000774:	6013      	str	r3, [r2, #0]
 8000776:	e02e      	b.n	80007d6 <HAL_RCC_OscConfig+0xce>
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d10c      	bne.n	800079a <HAL_RCC_OscConfig+0x92>
 8000780:	4b7a      	ldr	r3, [pc, #488]	; (800096c <HAL_RCC_OscConfig+0x264>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a79      	ldr	r2, [pc, #484]	; (800096c <HAL_RCC_OscConfig+0x264>)
 8000786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	4b77      	ldr	r3, [pc, #476]	; (800096c <HAL_RCC_OscConfig+0x264>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a76      	ldr	r2, [pc, #472]	; (800096c <HAL_RCC_OscConfig+0x264>)
 8000792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000796:	6013      	str	r3, [r2, #0]
 8000798:	e01d      	b.n	80007d6 <HAL_RCC_OscConfig+0xce>
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80007a2:	d10c      	bne.n	80007be <HAL_RCC_OscConfig+0xb6>
 80007a4:	4b71      	ldr	r3, [pc, #452]	; (800096c <HAL_RCC_OscConfig+0x264>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a70      	ldr	r2, [pc, #448]	; (800096c <HAL_RCC_OscConfig+0x264>)
 80007aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007ae:	6013      	str	r3, [r2, #0]
 80007b0:	4b6e      	ldr	r3, [pc, #440]	; (800096c <HAL_RCC_OscConfig+0x264>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a6d      	ldr	r2, [pc, #436]	; (800096c <HAL_RCC_OscConfig+0x264>)
 80007b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007ba:	6013      	str	r3, [r2, #0]
 80007bc:	e00b      	b.n	80007d6 <HAL_RCC_OscConfig+0xce>
 80007be:	4b6b      	ldr	r3, [pc, #428]	; (800096c <HAL_RCC_OscConfig+0x264>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a6a      	ldr	r2, [pc, #424]	; (800096c <HAL_RCC_OscConfig+0x264>)
 80007c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007c8:	6013      	str	r3, [r2, #0]
 80007ca:	4b68      	ldr	r3, [pc, #416]	; (800096c <HAL_RCC_OscConfig+0x264>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a67      	ldr	r2, [pc, #412]	; (800096c <HAL_RCC_OscConfig+0x264>)
 80007d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007d4:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d013      	beq.n	8000806 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007de:	f7ff fd0d 	bl	80001fc <HAL_GetTick>
 80007e2:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007e4:	e008      	b.n	80007f8 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80007e6:	f7ff fd09 	bl	80001fc <HAL_GetTick>
 80007ea:	4602      	mov	r2, r0
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	1ad3      	subs	r3, r2, r3
 80007f0:	2b64      	cmp	r3, #100	; 0x64
 80007f2:	d901      	bls.n	80007f8 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80007f4:	2303      	movs	r3, #3
 80007f6:	e1e1      	b.n	8000bbc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007f8:	4b5c      	ldr	r3, [pc, #368]	; (800096c <HAL_RCC_OscConfig+0x264>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000800:	2b00      	cmp	r3, #0
 8000802:	d0f0      	beq.n	80007e6 <HAL_RCC_OscConfig+0xde>
 8000804:	e014      	b.n	8000830 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000806:	f7ff fcf9 	bl	80001fc <HAL_GetTick>
 800080a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800080c:	e008      	b.n	8000820 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800080e:	f7ff fcf5 	bl	80001fc <HAL_GetTick>
 8000812:	4602      	mov	r2, r0
 8000814:	693b      	ldr	r3, [r7, #16]
 8000816:	1ad3      	subs	r3, r2, r3
 8000818:	2b64      	cmp	r3, #100	; 0x64
 800081a:	d901      	bls.n	8000820 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 800081c:	2303      	movs	r3, #3
 800081e:	e1cd      	b.n	8000bbc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000820:	4b52      	ldr	r3, [pc, #328]	; (800096c <HAL_RCC_OscConfig+0x264>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000828:	2b00      	cmp	r3, #0
 800082a:	d1f0      	bne.n	800080e <HAL_RCC_OscConfig+0x106>
 800082c:	e000      	b.n	8000830 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800082e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f003 0302 	and.w	r3, r3, #2
 8000838:	2b00      	cmp	r3, #0
 800083a:	d063      	beq.n	8000904 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800083c:	4b4b      	ldr	r3, [pc, #300]	; (800096c <HAL_RCC_OscConfig+0x264>)
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	f003 030c 	and.w	r3, r3, #12
 8000844:	2b00      	cmp	r3, #0
 8000846:	d00b      	beq.n	8000860 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000848:	4b48      	ldr	r3, [pc, #288]	; (800096c <HAL_RCC_OscConfig+0x264>)
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	f003 030c 	and.w	r3, r3, #12
 8000850:	2b08      	cmp	r3, #8
 8000852:	d11c      	bne.n	800088e <HAL_RCC_OscConfig+0x186>
 8000854:	4b45      	ldr	r3, [pc, #276]	; (800096c <HAL_RCC_OscConfig+0x264>)
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800085c:	2b00      	cmp	r3, #0
 800085e:	d116      	bne.n	800088e <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000860:	4b42      	ldr	r3, [pc, #264]	; (800096c <HAL_RCC_OscConfig+0x264>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f003 0302 	and.w	r3, r3, #2
 8000868:	2b00      	cmp	r3, #0
 800086a:	d005      	beq.n	8000878 <HAL_RCC_OscConfig+0x170>
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	691b      	ldr	r3, [r3, #16]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d001      	beq.n	8000878 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8000874:	2301      	movs	r3, #1
 8000876:	e1a1      	b.n	8000bbc <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000878:	4b3c      	ldr	r3, [pc, #240]	; (800096c <HAL_RCC_OscConfig+0x264>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	695b      	ldr	r3, [r3, #20]
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	4939      	ldr	r1, [pc, #228]	; (800096c <HAL_RCC_OscConfig+0x264>)
 8000888:	4313      	orrs	r3, r2
 800088a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800088c:	e03a      	b.n	8000904 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	691b      	ldr	r3, [r3, #16]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d020      	beq.n	80008d8 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000896:	4b36      	ldr	r3, [pc, #216]	; (8000970 <HAL_RCC_OscConfig+0x268>)
 8000898:	2201      	movs	r2, #1
 800089a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800089c:	f7ff fcae 	bl	80001fc <HAL_GetTick>
 80008a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008a2:	e008      	b.n	80008b6 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008a4:	f7ff fcaa 	bl	80001fc <HAL_GetTick>
 80008a8:	4602      	mov	r2, r0
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	d901      	bls.n	80008b6 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80008b2:	2303      	movs	r3, #3
 80008b4:	e182      	b.n	8000bbc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008b6:	4b2d      	ldr	r3, [pc, #180]	; (800096c <HAL_RCC_OscConfig+0x264>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f003 0302 	and.w	r3, r3, #2
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d0f0      	beq.n	80008a4 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008c2:	4b2a      	ldr	r3, [pc, #168]	; (800096c <HAL_RCC_OscConfig+0x264>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	00db      	lsls	r3, r3, #3
 80008d0:	4926      	ldr	r1, [pc, #152]	; (800096c <HAL_RCC_OscConfig+0x264>)
 80008d2:	4313      	orrs	r3, r2
 80008d4:	600b      	str	r3, [r1, #0]
 80008d6:	e015      	b.n	8000904 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80008d8:	4b25      	ldr	r3, [pc, #148]	; (8000970 <HAL_RCC_OscConfig+0x268>)
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008de:	f7ff fc8d 	bl	80001fc <HAL_GetTick>
 80008e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008e4:	e008      	b.n	80008f8 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008e6:	f7ff fc89 	bl	80001fc <HAL_GetTick>
 80008ea:	4602      	mov	r2, r0
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	1ad3      	subs	r3, r2, r3
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	d901      	bls.n	80008f8 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80008f4:	2303      	movs	r3, #3
 80008f6:	e161      	b.n	8000bbc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008f8:	4b1c      	ldr	r3, [pc, #112]	; (800096c <HAL_RCC_OscConfig+0x264>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f003 0302 	and.w	r3, r3, #2
 8000900:	2b00      	cmp	r3, #0
 8000902:	d1f0      	bne.n	80008e6 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f003 0308 	and.w	r3, r3, #8
 800090c:	2b00      	cmp	r3, #0
 800090e:	d039      	beq.n	8000984 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d019      	beq.n	800094c <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000918:	4b16      	ldr	r3, [pc, #88]	; (8000974 <HAL_RCC_OscConfig+0x26c>)
 800091a:	2201      	movs	r2, #1
 800091c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800091e:	f7ff fc6d 	bl	80001fc <HAL_GetTick>
 8000922:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000924:	e008      	b.n	8000938 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000926:	f7ff fc69 	bl	80001fc <HAL_GetTick>
 800092a:	4602      	mov	r2, r0
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	1ad3      	subs	r3, r2, r3
 8000930:	2b02      	cmp	r3, #2
 8000932:	d901      	bls.n	8000938 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8000934:	2303      	movs	r3, #3
 8000936:	e141      	b.n	8000bbc <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <HAL_RCC_OscConfig+0x264>)
 800093a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800093c:	f003 0302 	and.w	r3, r3, #2
 8000940:	2b00      	cmp	r3, #0
 8000942:	d0f0      	beq.n	8000926 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8000944:	2001      	movs	r0, #1
 8000946:	f000 fae3 	bl	8000f10 <RCC_Delay>
 800094a:	e01b      	b.n	8000984 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <HAL_RCC_OscConfig+0x26c>)
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000952:	f7ff fc53 	bl	80001fc <HAL_GetTick>
 8000956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000958:	e00e      	b.n	8000978 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800095a:	f7ff fc4f 	bl	80001fc <HAL_GetTick>
 800095e:	4602      	mov	r2, r0
 8000960:	693b      	ldr	r3, [r7, #16]
 8000962:	1ad3      	subs	r3, r2, r3
 8000964:	2b02      	cmp	r3, #2
 8000966:	d907      	bls.n	8000978 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8000968:	2303      	movs	r3, #3
 800096a:	e127      	b.n	8000bbc <HAL_RCC_OscConfig+0x4b4>
 800096c:	40021000 	.word	0x40021000
 8000970:	42420000 	.word	0x42420000
 8000974:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000978:	4b92      	ldr	r3, [pc, #584]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 800097a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800097c:	f003 0302 	and.w	r3, r3, #2
 8000980:	2b00      	cmp	r3, #0
 8000982:	d1ea      	bne.n	800095a <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f003 0304 	and.w	r3, r3, #4
 800098c:	2b00      	cmp	r3, #0
 800098e:	f000 80a6 	beq.w	8000ade <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000992:	2300      	movs	r3, #0
 8000994:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000996:	4b8b      	ldr	r3, [pc, #556]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000998:	69db      	ldr	r3, [r3, #28]
 800099a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d10d      	bne.n	80009be <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	4b88      	ldr	r3, [pc, #544]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	4a87      	ldr	r2, [pc, #540]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 80009a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ac:	61d3      	str	r3, [r2, #28]
 80009ae:	4b85      	ldr	r3, [pc, #532]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80009ba:	2301      	movs	r3, #1
 80009bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009be:	4b82      	ldr	r3, [pc, #520]	; (8000bc8 <HAL_RCC_OscConfig+0x4c0>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d118      	bne.n	80009fc <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009ca:	4b7f      	ldr	r3, [pc, #508]	; (8000bc8 <HAL_RCC_OscConfig+0x4c0>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a7e      	ldr	r2, [pc, #504]	; (8000bc8 <HAL_RCC_OscConfig+0x4c0>)
 80009d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80009d6:	f7ff fc11 	bl	80001fc <HAL_GetTick>
 80009da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009dc:	e008      	b.n	80009f0 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009de:	f7ff fc0d 	bl	80001fc <HAL_GetTick>
 80009e2:	4602      	mov	r2, r0
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	1ad3      	subs	r3, r2, r3
 80009e8:	2b64      	cmp	r3, #100	; 0x64
 80009ea:	d901      	bls.n	80009f0 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80009ec:	2303      	movs	r3, #3
 80009ee:	e0e5      	b.n	8000bbc <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009f0:	4b75      	ldr	r3, [pc, #468]	; (8000bc8 <HAL_RCC_OscConfig+0x4c0>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d0f0      	beq.n	80009de <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d106      	bne.n	8000a12 <HAL_RCC_OscConfig+0x30a>
 8000a04:	4b6f      	ldr	r3, [pc, #444]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000a06:	6a1b      	ldr	r3, [r3, #32]
 8000a08:	4a6e      	ldr	r2, [pc, #440]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	6213      	str	r3, [r2, #32]
 8000a10:	e02d      	b.n	8000a6e <HAL_RCC_OscConfig+0x366>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	68db      	ldr	r3, [r3, #12]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d10c      	bne.n	8000a34 <HAL_RCC_OscConfig+0x32c>
 8000a1a:	4b6a      	ldr	r3, [pc, #424]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000a1c:	6a1b      	ldr	r3, [r3, #32]
 8000a1e:	4a69      	ldr	r2, [pc, #420]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000a20:	f023 0301 	bic.w	r3, r3, #1
 8000a24:	6213      	str	r3, [r2, #32]
 8000a26:	4b67      	ldr	r3, [pc, #412]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000a28:	6a1b      	ldr	r3, [r3, #32]
 8000a2a:	4a66      	ldr	r2, [pc, #408]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000a2c:	f023 0304 	bic.w	r3, r3, #4
 8000a30:	6213      	str	r3, [r2, #32]
 8000a32:	e01c      	b.n	8000a6e <HAL_RCC_OscConfig+0x366>
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	2b05      	cmp	r3, #5
 8000a3a:	d10c      	bne.n	8000a56 <HAL_RCC_OscConfig+0x34e>
 8000a3c:	4b61      	ldr	r3, [pc, #388]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000a3e:	6a1b      	ldr	r3, [r3, #32]
 8000a40:	4a60      	ldr	r2, [pc, #384]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000a42:	f043 0304 	orr.w	r3, r3, #4
 8000a46:	6213      	str	r3, [r2, #32]
 8000a48:	4b5e      	ldr	r3, [pc, #376]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000a4a:	6a1b      	ldr	r3, [r3, #32]
 8000a4c:	4a5d      	ldr	r2, [pc, #372]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000a4e:	f043 0301 	orr.w	r3, r3, #1
 8000a52:	6213      	str	r3, [r2, #32]
 8000a54:	e00b      	b.n	8000a6e <HAL_RCC_OscConfig+0x366>
 8000a56:	4b5b      	ldr	r3, [pc, #364]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000a58:	6a1b      	ldr	r3, [r3, #32]
 8000a5a:	4a5a      	ldr	r2, [pc, #360]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000a5c:	f023 0301 	bic.w	r3, r3, #1
 8000a60:	6213      	str	r3, [r2, #32]
 8000a62:	4b58      	ldr	r3, [pc, #352]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000a64:	6a1b      	ldr	r3, [r3, #32]
 8000a66:	4a57      	ldr	r2, [pc, #348]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000a68:	f023 0304 	bic.w	r3, r3, #4
 8000a6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	68db      	ldr	r3, [r3, #12]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d015      	beq.n	8000aa2 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a76:	f7ff fbc1 	bl	80001fc <HAL_GetTick>
 8000a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a7c:	e00a      	b.n	8000a94 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a7e:	f7ff fbbd 	bl	80001fc <HAL_GetTick>
 8000a82:	4602      	mov	r2, r0
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	1ad3      	subs	r3, r2, r3
 8000a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d901      	bls.n	8000a94 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8000a90:	2303      	movs	r3, #3
 8000a92:	e093      	b.n	8000bbc <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a94:	4b4b      	ldr	r3, [pc, #300]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000a96:	6a1b      	ldr	r3, [r3, #32]
 8000a98:	f003 0302 	and.w	r3, r3, #2
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d0ee      	beq.n	8000a7e <HAL_RCC_OscConfig+0x376>
 8000aa0:	e014      	b.n	8000acc <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000aa2:	f7ff fbab 	bl	80001fc <HAL_GetTick>
 8000aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000aa8:	e00a      	b.n	8000ac0 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aaa:	f7ff fba7 	bl	80001fc <HAL_GetTick>
 8000aae:	4602      	mov	r2, r0
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d901      	bls.n	8000ac0 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8000abc:	2303      	movs	r3, #3
 8000abe:	e07d      	b.n	8000bbc <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ac0:	4b40      	ldr	r3, [pc, #256]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000ac2:	6a1b      	ldr	r3, [r3, #32]
 8000ac4:	f003 0302 	and.w	r3, r3, #2
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d1ee      	bne.n	8000aaa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000acc:	7dfb      	ldrb	r3, [r7, #23]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d105      	bne.n	8000ade <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ad2:	4b3c      	ldr	r3, [pc, #240]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000ad4:	69db      	ldr	r3, [r3, #28]
 8000ad6:	4a3b      	ldr	r2, [pc, #236]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000adc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	69db      	ldr	r3, [r3, #28]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d069      	beq.n	8000bba <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ae6:	4b37      	ldr	r3, [pc, #220]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f003 030c 	and.w	r3, r3, #12
 8000aee:	2b08      	cmp	r3, #8
 8000af0:	d061      	beq.n	8000bb6 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	69db      	ldr	r3, [r3, #28]
 8000af6:	2b02      	cmp	r3, #2
 8000af8:	d146      	bne.n	8000b88 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000afa:	4b34      	ldr	r3, [pc, #208]	; (8000bcc <HAL_RCC_OscConfig+0x4c4>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b00:	f7ff fb7c 	bl	80001fc <HAL_GetTick>
 8000b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b06:	e008      	b.n	8000b1a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b08:	f7ff fb78 	bl	80001fc <HAL_GetTick>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d901      	bls.n	8000b1a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8000b16:	2303      	movs	r3, #3
 8000b18:	e050      	b.n	8000bbc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b1a:	4b2a      	ldr	r3, [pc, #168]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d1f0      	bne.n	8000b08 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6a1b      	ldr	r3, [r3, #32]
 8000b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b2e:	d108      	bne.n	8000b42 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b30:	4b24      	ldr	r3, [pc, #144]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	4921      	ldr	r1, [pc, #132]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b42:	4b20      	ldr	r3, [pc, #128]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6a19      	ldr	r1, [r3, #32]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b52:	430b      	orrs	r3, r1
 8000b54:	491b      	ldr	r1, [pc, #108]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000b56:	4313      	orrs	r3, r2
 8000b58:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000b5a:	4b1c      	ldr	r3, [pc, #112]	; (8000bcc <HAL_RCC_OscConfig+0x4c4>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b60:	f7ff fb4c 	bl	80001fc <HAL_GetTick>
 8000b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b66:	e008      	b.n	8000b7a <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b68:	f7ff fb48 	bl	80001fc <HAL_GetTick>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	2b02      	cmp	r3, #2
 8000b74:	d901      	bls.n	8000b7a <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8000b76:	2303      	movs	r3, #3
 8000b78:	e020      	b.n	8000bbc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b7a:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d0f0      	beq.n	8000b68 <HAL_RCC_OscConfig+0x460>
 8000b86:	e018      	b.n	8000bba <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b88:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <HAL_RCC_OscConfig+0x4c4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b8e:	f7ff fb35 	bl	80001fc <HAL_GetTick>
 8000b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b94:	e008      	b.n	8000ba8 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b96:	f7ff fb31 	bl	80001fc <HAL_GetTick>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d901      	bls.n	8000ba8 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	e009      	b.n	8000bbc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d1f0      	bne.n	8000b96 <HAL_RCC_OscConfig+0x48e>
 8000bb4:	e001      	b.n	8000bba <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e000      	b.n	8000bbc <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8000bba:	2300      	movs	r3, #0
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	40007000 	.word	0x40007000
 8000bcc:	42420060 	.word	0x42420060

08000bd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bde:	4b7e      	ldr	r3, [pc, #504]	; (8000dd8 <HAL_RCC_ClockConfig+0x208>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	683a      	ldr	r2, [r7, #0]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d910      	bls.n	8000c0e <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bec:	4b7a      	ldr	r3, [pc, #488]	; (8000dd8 <HAL_RCC_ClockConfig+0x208>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f023 0207 	bic.w	r2, r3, #7
 8000bf4:	4978      	ldr	r1, [pc, #480]	; (8000dd8 <HAL_RCC_ClockConfig+0x208>)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000bfc:	4b76      	ldr	r3, [pc, #472]	; (8000dd8 <HAL_RCC_ClockConfig+0x208>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f003 0307 	and.w	r3, r3, #7
 8000c04:	683a      	ldr	r2, [r7, #0]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d001      	beq.n	8000c0e <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e0e0      	b.n	8000dd0 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d020      	beq.n	8000c5c <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f003 0304 	and.w	r3, r3, #4
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d005      	beq.n	8000c32 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c26:	4b6d      	ldr	r3, [pc, #436]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	4a6c      	ldr	r2, [pc, #432]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000c2c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000c30:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f003 0308 	and.w	r3, r3, #8
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d005      	beq.n	8000c4a <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c3e:	4b67      	ldr	r3, [pc, #412]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	4a66      	ldr	r2, [pc, #408]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000c44:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000c48:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c4a:	4b64      	ldr	r3, [pc, #400]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	4961      	ldr	r1, [pc, #388]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f003 0301 	and.w	r3, r3, #1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d06a      	beq.n	8000d3e <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d107      	bne.n	8000c80 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c70:	4b5a      	ldr	r3, [pc, #360]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d115      	bne.n	8000ca8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e0a7      	b.n	8000dd0 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d107      	bne.n	8000c98 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c88:	4b54      	ldr	r3, [pc, #336]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d109      	bne.n	8000ca8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	e09b      	b.n	8000dd0 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c98:	4b50      	ldr	r3, [pc, #320]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f003 0302 	and.w	r3, r3, #2
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d101      	bne.n	8000ca8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e093      	b.n	8000dd0 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ca8:	4b4c      	ldr	r3, [pc, #304]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f023 0203 	bic.w	r2, r3, #3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	4949      	ldr	r1, [pc, #292]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000cba:	f7ff fa9f 	bl	80001fc <HAL_GetTick>
 8000cbe:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d112      	bne.n	8000cee <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cc8:	e00a      	b.n	8000ce0 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cca:	f7ff fa97 	bl	80001fc <HAL_GetTick>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d901      	bls.n	8000ce0 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	e077      	b.n	8000dd0 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ce0:	4b3e      	ldr	r3, [pc, #248]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f003 030c 	and.w	r3, r3, #12
 8000ce8:	2b04      	cmp	r3, #4
 8000cea:	d1ee      	bne.n	8000cca <HAL_RCC_ClockConfig+0xfa>
 8000cec:	e027      	b.n	8000d3e <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d11d      	bne.n	8000d32 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000cf6:	e00a      	b.n	8000d0e <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cf8:	f7ff fa80 	bl	80001fc <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d901      	bls.n	8000d0e <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	e060      	b.n	8000dd0 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d0e:	4b33      	ldr	r3, [pc, #204]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 030c 	and.w	r3, r3, #12
 8000d16:	2b08      	cmp	r3, #8
 8000d18:	d1ee      	bne.n	8000cf8 <HAL_RCC_ClockConfig+0x128>
 8000d1a:	e010      	b.n	8000d3e <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d1c:	f7ff fa6e 	bl	80001fc <HAL_GetTick>
 8000d20:	4602      	mov	r2, r0
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d901      	bls.n	8000d32 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	e04e      	b.n	8000dd0 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d32:	4b2a      	ldr	r3, [pc, #168]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f003 030c 	and.w	r3, r3, #12
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d1ee      	bne.n	8000d1c <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d3e:	4b26      	ldr	r3, [pc, #152]	; (8000dd8 <HAL_RCC_ClockConfig+0x208>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d210      	bcs.n	8000d6e <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d4c:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <HAL_RCC_ClockConfig+0x208>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f023 0207 	bic.w	r2, r3, #7
 8000d54:	4920      	ldr	r1, [pc, #128]	; (8000dd8 <HAL_RCC_ClockConfig+0x208>)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d5c:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <HAL_RCC_ClockConfig+0x208>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f003 0307 	and.w	r3, r3, #7
 8000d64:	683a      	ldr	r2, [r7, #0]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d001      	beq.n	8000d6e <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e030      	b.n	8000dd0 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0304 	and.w	r3, r3, #4
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d008      	beq.n	8000d8c <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	4915      	ldr	r1, [pc, #84]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f003 0308 	and.w	r3, r3, #8
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d009      	beq.n	8000dac <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000d98:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	691b      	ldr	r3, [r3, #16]
 8000da4:	00db      	lsls	r3, r3, #3
 8000da6:	490d      	ldr	r1, [pc, #52]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000da8:	4313      	orrs	r3, r2
 8000daa:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000dac:	f000 f81c 	bl	8000de8 <HAL_RCC_GetSysClockFreq>
 8000db0:	4601      	mov	r1, r0
 8000db2:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	091b      	lsrs	r3, r3, #4
 8000db8:	f003 030f 	and.w	r3, r3, #15
 8000dbc:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <HAL_RCC_ClockConfig+0x210>)
 8000dbe:	5cd3      	ldrb	r3, [r2, r3]
 8000dc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000dc4:	4a07      	ldr	r2, [pc, #28]	; (8000de4 <HAL_RCC_ClockConfig+0x214>)
 8000dc6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f7ff f9d5 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 8000dce:	2300      	movs	r3, #0
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3710      	adds	r7, #16
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40022000 	.word	0x40022000
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	080027c4 	.word	0x080027c4
 8000de4:	20000008 	.word	0x20000008

08000de8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000de8:	b490      	push	{r4, r7}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000dee:	4b2a      	ldr	r3, [pc, #168]	; (8000e98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000df0:	1d3c      	adds	r4, r7, #4
 8000df2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000df4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000df8:	4b28      	ldr	r3, [pc, #160]	; (8000e9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
 8000e02:	2300      	movs	r3, #0
 8000e04:	61bb      	str	r3, [r7, #24]
 8000e06:	2300      	movs	r3, #0
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000e12:	4b23      	ldr	r3, [pc, #140]	; (8000ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f003 030c 	and.w	r3, r3, #12
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	d002      	beq.n	8000e28 <HAL_RCC_GetSysClockFreq+0x40>
 8000e22:	2b08      	cmp	r3, #8
 8000e24:	d003      	beq.n	8000e2e <HAL_RCC_GetSysClockFreq+0x46>
 8000e26:	e02d      	b.n	8000e84 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e28:	4b1e      	ldr	r3, [pc, #120]	; (8000ea4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e2a:	623b      	str	r3, [r7, #32]
      break;
 8000e2c:	e02d      	b.n	8000e8a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	0c9b      	lsrs	r3, r3, #18
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e3a:	4413      	add	r3, r2
 8000e3c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000e40:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d013      	beq.n	8000e74 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e4c:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	0c5b      	lsrs	r3, r3, #17
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e5a:	4413      	add	r3, r2
 8000e5c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000e60:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	4a0f      	ldr	r2, [pc, #60]	; (8000ea4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e66:	fb02 f203 	mul.w	r2, r2, r3
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
 8000e72:	e004      	b.n	8000e7e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	4a0c      	ldr	r2, [pc, #48]	; (8000ea8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000e78:	fb02 f303 	mul.w	r3, r2, r3
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e80:	623b      	str	r3, [r7, #32]
      break;
 8000e82:	e002      	b.n	8000e8a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000e84:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e86:	623b      	str	r3, [r7, #32]
      break;
 8000e88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000e8a:	6a3b      	ldr	r3, [r7, #32]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3728      	adds	r7, #40	; 0x28
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc90      	pop	{r4, r7}
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	080027b0 	.word	0x080027b0
 8000e9c:	080027c0 	.word	0x080027c0
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	007a1200 	.word	0x007a1200
 8000ea8:	003d0900 	.word	0x003d0900

08000eac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000eb0:	4b02      	ldr	r3, [pc, #8]	; (8000ebc <HAL_RCC_GetHCLKFreq+0x10>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr
 8000ebc:	20000008 	.word	0x20000008

08000ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000ec4:	f7ff fff2 	bl	8000eac <HAL_RCC_GetHCLKFreq>
 8000ec8:	4601      	mov	r1, r0
 8000eca:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	0a1b      	lsrs	r3, r3, #8
 8000ed0:	f003 0307 	and.w	r3, r3, #7
 8000ed4:	4a03      	ldr	r2, [pc, #12]	; (8000ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000ed6:	5cd3      	ldrb	r3, [r2, r3]
 8000ed8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8000edc:	4618      	mov	r0, r3
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	080027d4 	.word	0x080027d4

08000ee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000eec:	f7ff ffde 	bl	8000eac <HAL_RCC_GetHCLKFreq>
 8000ef0:	4601      	mov	r1, r0
 8000ef2:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	0adb      	lsrs	r3, r3, #11
 8000ef8:	f003 0307 	and.w	r3, r3, #7
 8000efc:	4a03      	ldr	r2, [pc, #12]	; (8000f0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000efe:	5cd3      	ldrb	r3, [r2, r3]
 8000f00:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8000f04:	4618      	mov	r0, r3
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	080027d4 	.word	0x080027d4

08000f10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f18:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <RCC_Delay+0x34>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <RCC_Delay+0x38>)
 8000f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f22:	0a5b      	lsrs	r3, r3, #9
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	fb02 f303 	mul.w	r3, r2, r3
 8000f2a:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000f2c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	1e5a      	subs	r2, r3, #1
 8000f32:	60fa      	str	r2, [r7, #12]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d1f9      	bne.n	8000f2c <RCC_Delay+0x1c>
}
 8000f38:	bf00      	nop
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000008 	.word	0x20000008
 8000f48:	10624dd3 	.word	0x10624dd3

08000f4c <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	; 0x28
 8000f50:	af02      	add	r7, sp, #8
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8000f60:	2300      	movs	r3, #0
 8000f62:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d101      	bne.n	8000f72 <HAL_SPI_Transmit+0x26>
 8000f6e:	2302      	movs	r3, #2
 8000f70:	e125      	b.n	80011be <HAL_SPI_Transmit+0x272>
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2201      	movs	r2, #1
 8000f76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8000f7a:	f7ff f93f 	bl	80001fc <HAL_GetTick>
 8000f7e:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d002      	beq.n	8000f92 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8000f90:	e10c      	b.n	80011ac <HAL_SPI_Transmit+0x260>
  }

  if((pData == NULL ) || (Size == 0U))
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d002      	beq.n	8000f9e <HAL_SPI_Transmit+0x52>
 8000f98:	88fb      	ldrh	r3, [r7, #6]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d102      	bne.n	8000fa4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8000fa2:	e103      	b.n	80011ac <HAL_SPI_Transmit+0x260>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	68ba      	ldr	r2, [r7, #8]
 8000fb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	88fa      	ldrh	r2, [r7, #6]
 8000fbc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	88fa      	ldrh	r2, [r7, #6]
 8000fc2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000fea:	d107      	bne.n	8000ffc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ffa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001006:	2b40      	cmp	r3, #64	; 0x40
 8001008:	d007      	beq.n	800101a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001018:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001022:	d147      	bne.n	80010b4 <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d004      	beq.n	8001036 <HAL_SPI_Transmit+0xea>
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001030:	b29b      	uxth	r3, r3
 8001032:	2b01      	cmp	r3, #1
 8001034:	d138      	bne.n	80010a8 <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	881a      	ldrh	r2, [r3, #0]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	3302      	adds	r3, #2
 8001044:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800104a:	b29b      	uxth	r3, r3
 800104c:	3b01      	subs	r3, #1
 800104e:	b29a      	uxth	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001054:	e028      	b.n	80010a8 <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	2b02      	cmp	r3, #2
 8001062:	d10f      	bne.n	8001084 <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	881a      	ldrh	r2, [r3, #0]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	3302      	adds	r3, #2
 8001072:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001078:	b29b      	uxth	r3, r3
 800107a:	3b01      	subs	r3, #1
 800107c:	b29a      	uxth	r2, r3
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	86da      	strh	r2, [r3, #54]	; 0x36
 8001082:	e011      	b.n	80010a8 <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d00b      	beq.n	80010a2 <HAL_SPI_Transmit+0x156>
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001090:	d00a      	beq.n	80010a8 <HAL_SPI_Transmit+0x15c>
 8001092:	f7ff f8b3 	bl	80001fc <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	683a      	ldr	r2, [r7, #0]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d802      	bhi.n	80010a8 <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80010a6:	e081      	b.n	80011ac <HAL_SPI_Transmit+0x260>
    while (hspi->TxXferCount > 0U)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1d1      	bne.n	8001056 <HAL_SPI_Transmit+0x10a>
 80010b2:	e048      	b.n	8001146 <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d004      	beq.n	80010c6 <HAL_SPI_Transmit+0x17a>
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d13a      	bne.n	800113c <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	330c      	adds	r3, #12
 80010cc:	68ba      	ldr	r2, [r7, #8]
 80010ce:	7812      	ldrb	r2, [r2, #0]
 80010d0:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	3301      	adds	r3, #1
 80010d6:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80010dc:	b29b      	uxth	r3, r3
 80010de:	3b01      	subs	r3, #1
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80010e6:	e029      	b.n	800113c <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d110      	bne.n	8001118 <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	330c      	adds	r3, #12
 80010fc:	68ba      	ldr	r2, [r7, #8]
 80010fe:	7812      	ldrb	r2, [r2, #0]
 8001100:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	3301      	adds	r3, #1
 8001106:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800110c:	b29b      	uxth	r3, r3
 800110e:	3b01      	subs	r3, #1
 8001110:	b29a      	uxth	r2, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	86da      	strh	r2, [r3, #54]	; 0x36
 8001116:	e011      	b.n	800113c <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d00b      	beq.n	8001136 <HAL_SPI_Transmit+0x1ea>
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001124:	d00a      	beq.n	800113c <HAL_SPI_Transmit+0x1f0>
 8001126:	f7ff f869 	bl	80001fc <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	429a      	cmp	r2, r3
 8001134:	d802      	bhi.n	800113c <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	77fb      	strb	r3, [r7, #31]
          goto error;
 800113a:	e037      	b.n	80011ac <HAL_SPI_Transmit+0x260>
    while (hspi->TxXferCount > 0U)
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001140:	b29b      	uxth	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1d0      	bne.n	80010e8 <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	2201      	movs	r2, #1
 800114e:	2102      	movs	r1, #2
 8001150:	68f8      	ldr	r0, [r7, #12]
 8001152:	f000 f9e5 	bl	8001520 <SPI_WaitFlagStateUntilTimeout>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d002      	beq.n	8001162 <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001160:	e024      	b.n	80011ac <HAL_SPI_Transmit+0x260>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	6839      	ldr	r1, [r7, #0]
 8001166:	68f8      	ldr	r0, [r7, #12]
 8001168:	f000 fa43 	bl	80015f2 <SPI_CheckFlag_BSY>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d005      	beq.n	800117e <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2220      	movs	r2, #32
 800117a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800117c:	e016      	b.n	80011ac <HAL_SPI_Transmit+0x260>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d10a      	bne.n	800119c <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	617b      	str	r3, [r7, #20]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	617b      	str	r3, [r7, #20]
 800119a:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d002      	beq.n	80011aa <HAL_SPI_Transmit+0x25e>
  {
    errorcode = HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	77fb      	strb	r3, [r7, #31]
 80011a8:	e000      	b.n	80011ac <HAL_SPI_Transmit+0x260>
  }

error:
 80011aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2201      	movs	r2, #1
 80011b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80011bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3720      	adds	r7, #32
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b08c      	sub	sp, #48	; 0x30
 80011ca:	af02      	add	r7, sp, #8
 80011cc:	60f8      	str	r0, [r7, #12]
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
 80011d2:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
 80011d8:	2300      	movs	r3, #0
 80011da:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 80011e0:	2301      	movs	r3, #1
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 80011e4:	2300      	movs	r3, #0
 80011e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d101      	bne.n	80011f8 <HAL_SPI_TransmitReceive+0x32>
 80011f4:	2302      	movs	r3, #2
 80011f6:	e182      	b.n	80014fe <HAL_SPI_TransmitReceive+0x338>
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2201      	movs	r2, #1
 80011fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001200:	f7fe fffc 	bl	80001fc <HAL_GetTick>
 8001204:	6178      	str	r0, [r7, #20]
  
  tmp  = hspi->State;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800120c:	b2db      	uxtb	r3, r3
 800120e:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	61bb      	str	r3, [r7, #24]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d00e      	beq.n	800123a <HAL_SPI_TransmitReceive+0x74>
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001222:	d106      	bne.n	8001232 <HAL_SPI_TransmitReceive+0x6c>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d102      	bne.n	8001232 <HAL_SPI_TransmitReceive+0x6c>
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	2b04      	cmp	r3, #4
 8001230:	d003      	beq.n	800123a <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8001232:	2302      	movs	r3, #2
 8001234:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001238:	e157      	b.n	80014ea <HAL_SPI_TransmitReceive+0x324>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d005      	beq.n	800124c <HAL_SPI_TransmitReceive+0x86>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d002      	beq.n	800124c <HAL_SPI_TransmitReceive+0x86>
 8001246:	887b      	ldrh	r3, [r7, #2]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d103      	bne.n	8001254 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001252:	e14a      	b.n	80014ea <HAL_SPI_TransmitReceive+0x324>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b01      	cmp	r3, #1
 800125e:	d103      	bne.n	8001268 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2205      	movs	r2, #5
 8001264:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2200      	movs	r2, #0
 800126c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	887a      	ldrh	r2, [r7, #2]
 8001278:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	887a      	ldrh	r2, [r7, #2]
 800127e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	887a      	ldrh	r2, [r7, #2]
 800128a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	887a      	ldrh	r2, [r7, #2]
 8001290:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2200      	movs	r2, #0
 8001296:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2200      	movs	r2, #0
 800129c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012a8:	2b40      	cmp	r3, #64	; 0x40
 80012aa:	d007      	beq.n	80012bc <HAL_SPI_TransmitReceive+0xf6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012c4:	d171      	bne.n	80013aa <HAL_SPI_TransmitReceive+0x1e4>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d004      	beq.n	80012d8 <HAL_SPI_TransmitReceive+0x112>
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d15d      	bne.n	8001394 <HAL_SPI_TransmitReceive+0x1ce>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	881a      	ldrh	r2, [r3, #0]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	3302      	adds	r3, #2
 80012e6:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	3b01      	subs	r3, #1
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80012f6:	e04d      	b.n	8001394 <HAL_SPI_TransmitReceive+0x1ce>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d01c      	beq.n	8001338 <HAL_SPI_TransmitReceive+0x172>
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001302:	b29b      	uxth	r3, r3
 8001304:	2b00      	cmp	r3, #0
 8001306:	d017      	beq.n	8001338 <HAL_SPI_TransmitReceive+0x172>
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b02      	cmp	r3, #2
 8001314:	d110      	bne.n	8001338 <HAL_SPI_TransmitReceive+0x172>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	881a      	ldrh	r2, [r3, #0]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	3302      	adds	r3, #2
 8001324:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800132a:	b29b      	uxth	r3, r3
 800132c:	3b01      	subs	r3, #1
 800132e:	b29a      	uxth	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8001334:	2300      	movs	r3, #0
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800133c:	b29b      	uxth	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d018      	beq.n	8001374 <HAL_SPI_TransmitReceive+0x1ae>
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	2b01      	cmp	r3, #1
 800134e:	d111      	bne.n	8001374 <HAL_SPI_TransmitReceive+0x1ae>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	b29a      	uxth	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3302      	adds	r3, #2
 8001360:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001366:	b29b      	uxth	r3, r3
 8001368:	3b01      	subs	r3, #1
 800136a:	b29a      	uxth	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8001370:	2301      	movs	r3, #1
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800137a:	d00b      	beq.n	8001394 <HAL_SPI_TransmitReceive+0x1ce>
 800137c:	f7fe ff3e 	bl	80001fc <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001388:	429a      	cmp	r2, r3
 800138a:	d803      	bhi.n	8001394 <HAL_SPI_TransmitReceive+0x1ce>
      {
        errorcode = HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8001392:	e0aa      	b.n	80014ea <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001398:	b29b      	uxth	r3, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1ac      	bne.n	80012f8 <HAL_SPI_TransmitReceive+0x132>
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d1a7      	bne.n	80012f8 <HAL_SPI_TransmitReceive+0x132>
 80013a8:	e070      	b.n	800148c <HAL_SPI_TransmitReceive+0x2c6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d004      	beq.n	80013bc <HAL_SPI_TransmitReceive+0x1f6>
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d15d      	bne.n	8001478 <HAL_SPI_TransmitReceive+0x2b2>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	330c      	adds	r3, #12
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	7812      	ldrb	r2, [r2, #0]
 80013c6:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	3301      	adds	r3, #1
 80013cc:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	3b01      	subs	r3, #1
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80013dc:	e04c      	b.n	8001478 <HAL_SPI_TransmitReceive+0x2b2>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d01c      	beq.n	800141e <HAL_SPI_TransmitReceive+0x258>
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d017      	beq.n	800141e <HAL_SPI_TransmitReceive+0x258>
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d110      	bne.n	800141e <HAL_SPI_TransmitReceive+0x258>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	1c5a      	adds	r2, r3, #1
 8001400:	60ba      	str	r2, [r7, #8]
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	6812      	ldr	r2, [r2, #0]
 8001406:	320c      	adds	r2, #12
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001410:	b29b      	uxth	r3, r3
 8001412:	3b01      	subs	r3, #1
 8001414:	b29a      	uxth	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 800141a:	2300      	movs	r3, #0
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001422:	b29b      	uxth	r3, r3
 8001424:	2b00      	cmp	r3, #0
 8001426:	d017      	beq.n	8001458 <HAL_SPI_TransmitReceive+0x292>
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b01      	cmp	r3, #1
 8001434:	d110      	bne.n	8001458 <HAL_SPI_TransmitReceive+0x292>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68d9      	ldr	r1, [r3, #12]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	1c5a      	adds	r2, r3, #1
 8001440:	607a      	str	r2, [r7, #4]
 8001442:	b2ca      	uxtb	r2, r1
 8001444:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800144a:	b29b      	uxth	r3, r3
 800144c:	3b01      	subs	r3, #1
 800144e:	b29a      	uxth	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8001454:	2301      	movs	r3, #1
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800145a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800145e:	d00b      	beq.n	8001478 <HAL_SPI_TransmitReceive+0x2b2>
 8001460:	f7fe fecc 	bl	80001fc <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800146c:	429a      	cmp	r2, r3
 800146e:	d803      	bhi.n	8001478 <HAL_SPI_TransmitReceive+0x2b2>
      {
        errorcode = HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8001476:	e038      	b.n	80014ea <HAL_SPI_TransmitReceive+0x324>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800147c:	b29b      	uxth	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1ad      	bne.n	80013de <HAL_SPI_TransmitReceive+0x218>
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001486:	b29b      	uxth	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1a8      	bne.n	80013de <HAL_SPI_TransmitReceive+0x218>
    }
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001492:	2201      	movs	r2, #1
 8001494:	2102      	movs	r1, #2
 8001496:	68f8      	ldr	r0, [r7, #12]
 8001498:	f000 f842 	bl	8001520 <SPI_WaitFlagStateUntilTimeout>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_SPI_TransmitReceive+0x2e4>
  {
    errorcode = HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80014a8:	e01f      	b.n	80014ea <HAL_SPI_TransmitReceive+0x324>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	f000 f89f 	bl	80015f2 <SPI_CheckFlag_BSY>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d006      	beq.n	80014c8 <HAL_SPI_TransmitReceive+0x302>
  {
    errorcode = HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2220      	movs	r2, #32
 80014c4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80014c6:	e010      	b.n	80014ea <HAL_SPI_TransmitReceive+0x324>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d10b      	bne.n	80014e8 <HAL_SPI_TransmitReceive+0x322>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80014d0:	2300      	movs	r3, #0
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	e000      	b.n	80014ea <HAL_SPI_TransmitReceive+0x324>
  }
  
error :
 80014e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80014fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3728      	adds	r7, #40	; 0x28
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001514:	b2db      	uxtb	r3, r3
}
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
 800152c:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800152e:	e04d      	b.n	80015cc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001536:	d049      	beq.n	80015cc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d007      	beq.n	800154e <SPI_WaitFlagStateUntilTimeout+0x2e>
 800153e:	f7fe fe5d 	bl	80001fc <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d83e      	bhi.n	80015cc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800155c:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001566:	d111      	bne.n	800158c <SPI_WaitFlagStateUntilTimeout+0x6c>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001570:	d004      	beq.n	800157c <SPI_WaitFlagStateUntilTimeout+0x5c>
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800157a:	d107      	bne.n	800158c <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800158a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001594:	d110      	bne.n	80015b8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6819      	ldr	r1, [r3, #0]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80015a4:	400b      	ands	r3, r1
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e00e      	b.n	80015ea <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689a      	ldr	r2, [r3, #8]
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	4013      	ands	r3, r2
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d101      	bne.n	80015e0 <SPI_WaitFlagStateUntilTimeout+0xc0>
 80015dc:	2201      	movs	r2, #1
 80015de:	e000      	b.n	80015e2 <SPI_WaitFlagStateUntilTimeout+0xc2>
 80015e0:	2200      	movs	r2, #0
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d1a3      	bne.n	8001530 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b086      	sub	sp, #24
 80015f6:	af02      	add	r7, sp, #8
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	2200      	movs	r2, #0
 8001606:	2180      	movs	r1, #128	; 0x80
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f7ff ff89 	bl	8001520 <SPI_WaitFlagStateUntilTimeout>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d007      	beq.n	8001624 <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001618:	f043 0220 	orr.w	r2, r3, #32
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e000      	b.n	8001626 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d101      	bne.n	8001640 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e057      	b.n	80016f0 <HAL_SPI_Init+0xc2>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d102      	bne.n	8001658 <HAL_SPI_Init+0x2a>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 ff5a 	bl	800250c <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2202      	movs	r2, #2
 800165c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800166e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	431a      	orrs	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	431a      	orrs	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001694:	431a      	orrs	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	431a      	orrs	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	ea42 0103 	orr.w	r1, r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	0c1b      	lsrs	r3, r3, #16
 80016b6:	f003 0104 	and.w	r1, r3, #4
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80016ce:	611a      	str	r2, [r3, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	69da      	ldr	r2, [r3, #28]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016de:	61da      	str	r2, [r3, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  
  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e03f      	b.n	800178a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d106      	bne.n	8001724 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 ff3e 	bl	80025a0 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2224      	movs	r2, #36	; 0x24
 8001728:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	68da      	ldr	r2, [r3, #12]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800173a:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 f829 	bl	8001794 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	691a      	ldr	r2, [r3, #16]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001750:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	695a      	ldr	r2, [r3, #20]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001760:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68da      	ldr	r2, [r3, #12]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001770:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2220      	movs	r2, #32
 800177c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2220      	movs	r2, #32
 8001784:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001794:	b5b0      	push	{r4, r5, r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800179c:	2300      	movs	r3, #0
 800179e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	68da      	ldr	r2, [r3, #12]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	430a      	orrs	r2, r1
 80017b4:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	431a      	orrs	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80017d6:	f023 030c 	bic.w	r3, r3, #12
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6812      	ldr	r2, [r2, #0]
 80017de:	68f9      	ldr	r1, [r7, #12]
 80017e0:	430b      	orrs	r3, r1
 80017e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	699a      	ldr	r2, [r3, #24]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a6f      	ldr	r2, [pc, #444]	; (80019bc <UART_SetConfig+0x228>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d16b      	bne.n	80018dc <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001804:	f7ff fb70 	bl	8000ee8 <HAL_RCC_GetPCLK2Freq>
 8001808:	4602      	mov	r2, r0
 800180a:	4613      	mov	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	009a      	lsls	r2, r3, #2
 8001812:	441a      	add	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	fbb2 f3f3 	udiv	r3, r2, r3
 800181e:	4a68      	ldr	r2, [pc, #416]	; (80019c0 <UART_SetConfig+0x22c>)
 8001820:	fba2 2303 	umull	r2, r3, r2, r3
 8001824:	095b      	lsrs	r3, r3, #5
 8001826:	011c      	lsls	r4, r3, #4
 8001828:	f7ff fb5e 	bl	8000ee8 <HAL_RCC_GetPCLK2Freq>
 800182c:	4602      	mov	r2, r0
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	009a      	lsls	r2, r3, #2
 8001836:	441a      	add	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	fbb2 f5f3 	udiv	r5, r2, r3
 8001842:	f7ff fb51 	bl	8000ee8 <HAL_RCC_GetPCLK2Freq>
 8001846:	4602      	mov	r2, r0
 8001848:	4613      	mov	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	009a      	lsls	r2, r3, #2
 8001850:	441a      	add	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	fbb2 f3f3 	udiv	r3, r2, r3
 800185c:	4a58      	ldr	r2, [pc, #352]	; (80019c0 <UART_SetConfig+0x22c>)
 800185e:	fba2 2303 	umull	r2, r3, r2, r3
 8001862:	095b      	lsrs	r3, r3, #5
 8001864:	2264      	movs	r2, #100	; 0x64
 8001866:	fb02 f303 	mul.w	r3, r2, r3
 800186a:	1aeb      	subs	r3, r5, r3
 800186c:	011b      	lsls	r3, r3, #4
 800186e:	3332      	adds	r3, #50	; 0x32
 8001870:	4a53      	ldr	r2, [pc, #332]	; (80019c0 <UART_SetConfig+0x22c>)
 8001872:	fba2 2303 	umull	r2, r3, r2, r3
 8001876:	095b      	lsrs	r3, r3, #5
 8001878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800187c:	441c      	add	r4, r3
 800187e:	f7ff fb33 	bl	8000ee8 <HAL_RCC_GetPCLK2Freq>
 8001882:	4602      	mov	r2, r0
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	009a      	lsls	r2, r3, #2
 800188c:	441a      	add	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	fbb2 f5f3 	udiv	r5, r2, r3
 8001898:	f7ff fb26 	bl	8000ee8 <HAL_RCC_GetPCLK2Freq>
 800189c:	4602      	mov	r2, r0
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	009a      	lsls	r2, r3, #2
 80018a6:	441a      	add	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b2:	4a43      	ldr	r2, [pc, #268]	; (80019c0 <UART_SetConfig+0x22c>)
 80018b4:	fba2 2303 	umull	r2, r3, r2, r3
 80018b8:	095b      	lsrs	r3, r3, #5
 80018ba:	2264      	movs	r2, #100	; 0x64
 80018bc:	fb02 f303 	mul.w	r3, r2, r3
 80018c0:	1aeb      	subs	r3, r5, r3
 80018c2:	011b      	lsls	r3, r3, #4
 80018c4:	3332      	adds	r3, #50	; 0x32
 80018c6:	4a3e      	ldr	r2, [pc, #248]	; (80019c0 <UART_SetConfig+0x22c>)
 80018c8:	fba2 2303 	umull	r2, r3, r2, r3
 80018cc:	095b      	lsrs	r3, r3, #5
 80018ce:	f003 020f 	and.w	r2, r3, #15
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4422      	add	r2, r4
 80018d8:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80018da:	e06a      	b.n	80019b2 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80018dc:	f7ff faf0 	bl	8000ec0 <HAL_RCC_GetPCLK1Freq>
 80018e0:	4602      	mov	r2, r0
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	009a      	lsls	r2, r3, #2
 80018ea:	441a      	add	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f6:	4a32      	ldr	r2, [pc, #200]	; (80019c0 <UART_SetConfig+0x22c>)
 80018f8:	fba2 2303 	umull	r2, r3, r2, r3
 80018fc:	095b      	lsrs	r3, r3, #5
 80018fe:	011c      	lsls	r4, r3, #4
 8001900:	f7ff fade 	bl	8000ec0 <HAL_RCC_GetPCLK1Freq>
 8001904:	4602      	mov	r2, r0
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	009a      	lsls	r2, r3, #2
 800190e:	441a      	add	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	fbb2 f5f3 	udiv	r5, r2, r3
 800191a:	f7ff fad1 	bl	8000ec0 <HAL_RCC_GetPCLK1Freq>
 800191e:	4602      	mov	r2, r0
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	009a      	lsls	r2, r3, #2
 8001928:	441a      	add	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	fbb2 f3f3 	udiv	r3, r2, r3
 8001934:	4a22      	ldr	r2, [pc, #136]	; (80019c0 <UART_SetConfig+0x22c>)
 8001936:	fba2 2303 	umull	r2, r3, r2, r3
 800193a:	095b      	lsrs	r3, r3, #5
 800193c:	2264      	movs	r2, #100	; 0x64
 800193e:	fb02 f303 	mul.w	r3, r2, r3
 8001942:	1aeb      	subs	r3, r5, r3
 8001944:	011b      	lsls	r3, r3, #4
 8001946:	3332      	adds	r3, #50	; 0x32
 8001948:	4a1d      	ldr	r2, [pc, #116]	; (80019c0 <UART_SetConfig+0x22c>)
 800194a:	fba2 2303 	umull	r2, r3, r2, r3
 800194e:	095b      	lsrs	r3, r3, #5
 8001950:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001954:	441c      	add	r4, r3
 8001956:	f7ff fab3 	bl	8000ec0 <HAL_RCC_GetPCLK1Freq>
 800195a:	4602      	mov	r2, r0
 800195c:	4613      	mov	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	009a      	lsls	r2, r3, #2
 8001964:	441a      	add	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	fbb2 f5f3 	udiv	r5, r2, r3
 8001970:	f7ff faa6 	bl	8000ec0 <HAL_RCC_GetPCLK1Freq>
 8001974:	4602      	mov	r2, r0
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	009a      	lsls	r2, r3, #2
 800197e:	441a      	add	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	fbb2 f3f3 	udiv	r3, r2, r3
 800198a:	4a0d      	ldr	r2, [pc, #52]	; (80019c0 <UART_SetConfig+0x22c>)
 800198c:	fba2 2303 	umull	r2, r3, r2, r3
 8001990:	095b      	lsrs	r3, r3, #5
 8001992:	2264      	movs	r2, #100	; 0x64
 8001994:	fb02 f303 	mul.w	r3, r2, r3
 8001998:	1aeb      	subs	r3, r5, r3
 800199a:	011b      	lsls	r3, r3, #4
 800199c:	3332      	adds	r3, #50	; 0x32
 800199e:	4a08      	ldr	r2, [pc, #32]	; (80019c0 <UART_SetConfig+0x22c>)
 80019a0:	fba2 2303 	umull	r2, r3, r2, r3
 80019a4:	095b      	lsrs	r3, r3, #5
 80019a6:	f003 020f 	and.w	r2, r3, #15
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4422      	add	r2, r4
 80019b0:	609a      	str	r2, [r3, #8]
}
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bdb0      	pop	{r4, r5, r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40013800 	.word	0x40013800
 80019c0:	51eb851f 	.word	0x51eb851f

080019c4 <SX1276_SetNSS>:
//////////////////////////////////
// logic
//////////////////////////////////


__weak void SX1276_SetNSS(SX1276_t * module, GPIO_PinState state) {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	460b      	mov	r3, r1
 80019ce:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(module->nss.port, module->nss.pin, state);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019d8:	b29b      	uxth	r3, r3
 80019da:	78fa      	ldrb	r2, [r7, #3]
 80019dc:	4619      	mov	r1, r3
 80019de:	f7fe fe7b 	bl	80006d8 <HAL_GPIO_WritePin>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <SX1276_Reset>:

__weak void SX1276_Reset(SX1276_t * module) {
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
	SX1276_SetNSS(module, 1);
 80019f2:	2101      	movs	r1, #1
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff ffe5 	bl	80019c4 <SX1276_SetNSS>
	HAL_GPIO_WritePin(module->reset.port, module->reset.pin, GPIO_PIN_RESET);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	2200      	movs	r2, #0
 8001a06:	4619      	mov	r1, r3
 8001a08:	f7fe fe66 	bl	80006d8 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	f7fe fbff 	bl	8000210 <HAL_Delay>

	HAL_GPIO_WritePin(module->reset.port, module->reset.pin, GPIO_PIN_SET);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f7fe fe5a 	bl	80006d8 <HAL_GPIO_WritePin>

	HAL_Delay(6);
 8001a24:	2006      	movs	r0, #6
 8001a26:	f7fe fbf3 	bl	8000210 <HAL_Delay>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <SX1276_SPICommand>:

__weak void SX1276_SPICommand(SX1276_t * module, uint8_t cmd) {
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	70fb      	strb	r3, [r7, #3]
	SX1276_SetNSS(module, 0);
 8001a3e:	2100      	movs	r1, #0
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff ffbf 	bl	80019c4 <SX1276_SetNSS>
	HAL_SPI_Transmit(module->spi, &cmd, 1, 1000);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8001a4a:	1cf9      	adds	r1, r7, #3
 8001a4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a50:	2201      	movs	r2, #1
 8001a52:	f7ff fa7b 	bl	8000f4c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->spi) != HAL_SPI_STATE_READY)
 8001a56:	bf00      	nop
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff fd52 	bl	8001506 <HAL_SPI_GetState>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d1f7      	bne.n	8001a58 <SX1276_SPICommand+0x26>
	;
}
 8001a68:	bf00      	nop
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <SX1276_SPIReadByte>:

__weak uint8_t SX1276_SPIReadByte(SX1276_t * module) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af02      	add	r7, sp, #8
 8001a76:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	73bb      	strb	r3, [r7, #14]

	SX1276_SetNSS(module, 0);
 8001a80:	2100      	movs	r1, #0
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff ff9e 	bl	80019c4 <SX1276_SetNSS>
	HAL_SPI_TransmitReceive(module->spi, &txByte, &rxByte, 1, 1000);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8001a8c:	f107 020e 	add.w	r2, r7, #14
 8001a90:	f107 010f 	add.w	r1, r7, #15
 8001a94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	f7ff fb93 	bl	80011c6 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(module->spi) != HAL_SPI_STATE_READY)
 8001aa0:	bf00      	nop
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fd2d 	bl	8001506 <HAL_SPI_GetState>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d1f7      	bne.n	8001aa2 <SX1276_SPIReadByte+0x32>

	;
	return rxByte;
 8001ab2:	7bbb      	ldrb	r3, [r7, #14]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <SX1276_SPIRead>:

//////////////////////////////////
// logic
//////////////////////////////////

uint8_t SX1276_SPIRead(SX1276_t * module, uint8_t addr) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1276_SPICommand(module, addr);
 8001ac8:	78fb      	ldrb	r3, [r7, #3]
 8001aca:	4619      	mov	r1, r3
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7ff ffb0 	bl	8001a32 <SX1276_SPICommand>
	tmp = SX1276_SPIReadByte(module);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ffcc 	bl	8001a70 <SX1276_SPIReadByte>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	73fb      	strb	r3, [r7, #15]
	SX1276_SetNSS(module, 1);
 8001adc:	2101      	movs	r1, #1
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff ff70 	bl	80019c4 <SX1276_SetNSS>
	return tmp;
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <SX1276_SPIWrite>:

void SX1276_SPIWrite(SX1276_t * module, uint8_t addr, uint8_t cmd) {
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	460b      	mov	r3, r1
 8001af8:	70fb      	strb	r3, [r7, #3]
 8001afa:	4613      	mov	r3, r2
 8001afc:	70bb      	strb	r3, [r7, #2]
	SX1276_SetNSS(module, 0);
 8001afe:	2100      	movs	r1, #0
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff ff5f 	bl	80019c4 <SX1276_SetNSS>
	SX1276_SPICommand(module, addr | 0x80);
 8001b06:	78fb      	ldrb	r3, [r7, #3]
 8001b08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	4619      	mov	r1, r3
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff ff8e 	bl	8001a32 <SX1276_SPICommand>
	SX1276_SPICommand(module, cmd);
 8001b16:	78bb      	ldrb	r3, [r7, #2]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff ff89 	bl	8001a32 <SX1276_SPICommand>
	SX1276_SetNSS(module, 1);
 8001b20:	2101      	movs	r1, #1
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ff4e 	bl	80019c4 <SX1276_SetNSS>
}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <SX1276_SPIBurstRead>:

void SX1276_SPIBurstRead(SX1276_t * module, uint8_t addr, uint8_t* rxBuf,
uint8_t length) {
 8001b30:	b590      	push	{r4, r7, lr}
 8001b32:	b087      	sub	sp, #28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	607a      	str	r2, [r7, #4]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	72fb      	strb	r3, [r7, #11]
 8001b40:	4613      	mov	r3, r2
 8001b42:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 8001b44:	7abb      	ldrb	r3, [r7, #10]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d91f      	bls.n	8001b8a <SX1276_SPIBurstRead+0x5a>
		return;
	} else {
		SX1276_SetNSS(module, 0);
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f7ff ff39 	bl	80019c4 <SX1276_SetNSS>
		SX1276_SPICommand(module, addr);
 8001b52:	7afb      	ldrb	r3, [r7, #11]
 8001b54:	4619      	mov	r1, r3
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f7ff ff6b 	bl	8001a32 <SX1276_SPICommand>
		for (i = 0; i < length; i++) {
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	75fb      	strb	r3, [r7, #23]
 8001b60:	e00a      	b.n	8001b78 <SX1276_SPIBurstRead+0x48>
			*(rxBuf + i) = SX1276_SPIReadByte(module);
 8001b62:	7dfb      	ldrb	r3, [r7, #23]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	18d4      	adds	r4, r2, r3
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f7ff ff81 	bl	8001a70 <SX1276_SPIReadByte>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 8001b72:	7dfb      	ldrb	r3, [r7, #23]
 8001b74:	3301      	adds	r3, #1
 8001b76:	75fb      	strb	r3, [r7, #23]
 8001b78:	7dfa      	ldrb	r2, [r7, #23]
 8001b7a:	7abb      	ldrb	r3, [r7, #10]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d3f0      	bcc.n	8001b62 <SX1276_SPIBurstRead+0x32>
		}
		SX1276_SetNSS(module, 1);
 8001b80:	2101      	movs	r1, #1
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f7ff ff1e 	bl	80019c4 <SX1276_SetNSS>
 8001b88:	e000      	b.n	8001b8c <SX1276_SPIBurstRead+0x5c>
		return;
 8001b8a:	bf00      	nop
	}
}
 8001b8c:	371c      	adds	r7, #28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd90      	pop	{r4, r7, pc}

08001b92 <SX1276_SPIBurstWrite>:

void SX1276_SPIBurstWrite(SX1276_t * module, uint8_t addr, uint8_t* txBuf,
uint8_t length) {
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b086      	sub	sp, #24
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	60f8      	str	r0, [r7, #12]
 8001b9a:	607a      	str	r2, [r7, #4]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	72fb      	strb	r3, [r7, #11]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8001ba6:	7abb      	ldrb	r3, [r7, #10]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d922      	bls.n	8001bf2 <SX1276_SPIBurstWrite+0x60>
		return;
	} else {
		SX1276_SetNSS(module, 0);
 8001bac:	2100      	movs	r1, #0
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f7ff ff08 	bl	80019c4 <SX1276_SetNSS>
		SX1276_SPICommand(module, addr | 0x80);
 8001bb4:	7afb      	ldrb	r3, [r7, #11]
 8001bb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f7ff ff37 	bl	8001a32 <SX1276_SPICommand>
		for (i = 0; i < length; i++) {
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	75fb      	strb	r3, [r7, #23]
 8001bc8:	e00a      	b.n	8001be0 <SX1276_SPIBurstWrite+0x4e>
			SX1276_SPICommand(module, *(txBuf + i));
 8001bca:	7dfb      	ldrb	r3, [r7, #23]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	4413      	add	r3, r2
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f7ff ff2c 	bl	8001a32 <SX1276_SPICommand>
		for (i = 0; i < length; i++) {
 8001bda:	7dfb      	ldrb	r3, [r7, #23]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	75fb      	strb	r3, [r7, #23]
 8001be0:	7dfa      	ldrb	r2, [r7, #23]
 8001be2:	7abb      	ldrb	r3, [r7, #10]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d3f0      	bcc.n	8001bca <SX1276_SPIBurstWrite+0x38>
		}
		SX1276_SetNSS(module, 1);
 8001be8:	2101      	movs	r1, #1
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f7ff feea 	bl	80019c4 <SX1276_SetNSS>
 8001bf0:	e000      	b.n	8001bf4 <SX1276_SPIBurstWrite+0x62>
		return;
 8001bf2:	bf00      	nop
	}
}
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <SX1276_config>:


void SX1276_config(SX1276_t * module){
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
	SX1276_sleep(module); //Change modem mode Must in Sleep mode
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f8e9 	bl	8001ddc <SX1276_sleep>

	SX1276_SPIWrite(module, LR_RegFrMsb, (module->frequency>>16)&0xFF);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	0c1b      	lsrs	r3, r3, #16
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	461a      	mov	r2, r3
 8001c14:	2106      	movs	r1, #6
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff ff69 	bl	8001aee <SX1276_SPIWrite>
	SX1276_SPIWrite(module, LR_RegFrMid, (module->frequency>> 8)&0xFF);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	0a1b      	lsrs	r3, r3, #8
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	461a      	mov	r2, r3
 8001c26:	2107      	movs	r1, #7
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff ff60 	bl	8001aee <SX1276_SPIWrite>
	SX1276_SPIWrite(module, LR_RegFrLsb, (module->frequency    )&0xFF);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	461a      	mov	r2, r3
 8001c36:	2108      	movs	r1, #8
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff ff58 	bl	8001aee <SX1276_SPIWrite>

	//setting base parameter
	SX1276_SPIWrite(module, LR_RegPaConfig, 0xF0 | (module->power-5)); //Setting output power parameter
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	791b      	ldrb	r3, [r3, #4]
 8001c42:	3b05      	subs	r3, #5
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	b25b      	sxtb	r3, r3
 8001c48:	f063 030f 	orn	r3, r3, #15
 8001c4c:	b25b      	sxtb	r3, r3
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	461a      	mov	r2, r3
 8001c52:	2109      	movs	r1, #9
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff ff4a 	bl	8001aee <SX1276_SPIWrite>

	SX1276_SPIWrite(module, LR_RegOcp, 0x32);	//OCP to 150 mA
 8001c5a:	2232      	movs	r2, #50	; 0x32
 8001c5c:	210b      	movs	r1, #11
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff ff45 	bl	8001aee <SX1276_SPIWrite>
	SX1276_SPIWrite(module, LR_RegLna, 0x23);	//LNA to full gain
 8001c64:	2223      	movs	r2, #35	; 0x23
 8001c66:	210c      	movs	r1, #12
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ff40 	bl	8001aee <SX1276_SPIWrite>
	SX1276_SPIWrite(module,	LR_RegModemConfig1,
	((module->bw << 4) +         //Bandwidth
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	799b      	ldrb	r3, [r3, #6]
 8001c72:	011b      	lsls	r3, r3, #4
 8001c74:	b2da      	uxtb	r2, r3
	( module->cr << 1))+         //Coding rate
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	79db      	ldrb	r3, [r3, #7]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	b2db      	uxtb	r3, r3
	((module->bw << 4) +         //Bandwidth
 8001c7e:	4413      	add	r3, r2
 8001c80:	b2da      	uxtb	r2, r3
	(module->implicitHeader&1)); //Implicit header flag
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	7a9b      	ldrb	r3, [r3, #10]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	b2db      	uxtb	r3, r3
	SX1276_SPIWrite(module,	LR_RegModemConfig1,
 8001c8c:	4413      	add	r3, r2
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	461a      	mov	r2, r3
 8001c92:	211d      	movs	r1, #29
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff ff2a 	bl	8001aee <SX1276_SPIWrite>
	SX1276_SPIWrite(module,	LR_RegModemConfig2,
	((module->sf << 4) +         //Spreading factor
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	795b      	ldrb	r3, [r3, #5]
 8001c9e:	011b      	lsls	r3, r3, #4
 8001ca0:	b2da      	uxtb	r2, r3
	(module->crcEnable<<2) +     //CRC enable flag
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	7a5b      	ldrb	r3, [r3, #9]
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	b2db      	uxtb	r3, r3
	((module->sf << 4) +         //Spreading factor
 8001caa:	4413      	add	r3, r2
 8001cac:	b2db      	uxtb	r3, r3
	SX1276_SPIWrite(module,	LR_RegModemConfig2,
 8001cae:	3303      	adds	r3, #3
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	211e      	movs	r1, #30
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff ff19 	bl	8001aee <SX1276_SPIWrite>
	0x3));                       //RX Time-Out MSB (always max)

	SX1276_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RX symb Timeout = 0x3FF(Max)
 8001cbc:	22ff      	movs	r2, #255	; 0xff
 8001cbe:	211f      	movs	r1, #31
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff ff14 	bl	8001aee <SX1276_SPIWrite>
	SX1276_SPIWrite(module, LR_RegPreambleMsb, (module->preamble>>8)& 0xFF); //RegPreambleMsb
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	899b      	ldrh	r3, [r3, #12]
 8001cca:	0a1b      	lsrs	r3, r3, #8
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	2120      	movs	r1, #32
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff ff0a 	bl	8001aee <SX1276_SPIWrite>
	SX1276_SPIWrite(module, LR_RegPreambleLsb, module->preamble & 0xFF); //RegPreambleLsb
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	899b      	ldrh	r3, [r3, #12]
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	2121      	movs	r1, #33	; 0x21
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff ff02 	bl	8001aee <SX1276_SPIWrite>
	SX1276_SPIWrite(module, LR_RegPayloadLength, module->len); //Payload lenght
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	7a1b      	ldrb	r3, [r3, #8]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	2122      	movs	r1, #34	; 0x22
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff fefb 	bl	8001aee <SX1276_SPIWrite>
	SX1276_SPIWrite(module, LR_RegSyncWord, module->syncWord);  //Sync word
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	7b9b      	ldrb	r3, [r3, #14]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	2139      	movs	r1, #57	; 0x39
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff fef4 	bl	8001aee <SX1276_SPIWrite>
	module->readBytes = 0;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

	/*** Sensitivity correction for 500kHz BW (see Errata) ***/
	module->revision=SX1276_SPIRead(module, REG_LR_VERSION);
 8001d0e:	2142      	movs	r1, #66	; 0x42
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff fed3 	bl	8001abc <SX1276_SPIRead>
 8001d16:	4603      	mov	r3, r0
 8001d18:	461a      	mov	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	if (module->bw==SX1276_LORA_BW_500KHZ && module->revision==0x12)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	799b      	ldrb	r3, [r3, #6]
 8001d24:	2b09      	cmp	r3, #9
 8001d26:	d12c      	bne.n	8001d82 <SX1276_config+0x186>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001d2e:	2b12      	cmp	r3, #18
 8001d30:	d127      	bne.n	8001d82 <SX1276_config+0x186>
	{
		if (module->frequency > SX1276_FREQ_820MHZ &&
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a16      	ldr	r2, [pc, #88]	; (8001d90 <SX1276_config+0x194>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d90e      	bls.n	8001d5a <SX1276_config+0x15e>
			module->frequency < SX1276_FREQ_1020MHZ)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
		if (module->frequency > SX1276_FREQ_820MHZ &&
 8001d40:	4a14      	ldr	r2, [pc, #80]	; (8001d94 <SX1276_config+0x198>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d809      	bhi.n	8001d5a <SX1276_config+0x15e>
		{
			SX1276_SPIWrite(module, 0x36, 0x2);
 8001d46:	2202      	movs	r2, #2
 8001d48:	2136      	movs	r1, #54	; 0x36
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff fecf 	bl	8001aee <SX1276_SPIWrite>
			SX1276_SPIWrite(module, 0x3A, 0x64);
 8001d50:	2264      	movs	r2, #100	; 0x64
 8001d52:	213a      	movs	r1, #58	; 0x3a
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff feca 	bl	8001aee <SX1276_SPIWrite>

		}
		if (module->frequency > SX1276_FREQ_410MHZ &&
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a0e      	ldr	r2, [pc, #56]	; (8001d98 <SX1276_config+0x19c>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d90e      	bls.n	8001d82 <SX1276_config+0x186>
			module->frequency < SX1276_FREQ_525MHZ)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
		if (module->frequency > SX1276_FREQ_410MHZ &&
 8001d68:	4a0c      	ldr	r2, [pc, #48]	; (8001d9c <SX1276_config+0x1a0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d809      	bhi.n	8001d82 <SX1276_config+0x186>
		{
			SX1276_SPIWrite(module, 0x36, 0x3);
 8001d6e:	2203      	movs	r2, #3
 8001d70:	2136      	movs	r1, #54	; 0x36
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff febb 	bl	8001aee <SX1276_SPIWrite>
			SX1276_SPIWrite(module, 0x3A, 0x7F);
 8001d78:	227f      	movs	r2, #127	; 0x7f
 8001d7a:	213a      	movs	r1, #58	; 0x3a
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff feb6 	bl	8001aee <SX1276_SPIWrite>

		}

	}
	SX1276_standby(module); //Entry standby mode
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f80c 	bl	8001da0 <SX1276_standby>
}
 8001d88:	bf00      	nop
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	00cd0022 	.word	0x00cd0022
 8001d94:	00ff0029 	.word	0x00ff0029
 8001d98:	00668011 	.word	0x00668011
 8001d9c:	00834015 	.word	0x00834015

08001da0 <SX1276_standby>:
module->syncWord=0x1;
module->alwaysRX=1;

}

void SX1276_standby(SX1276_t * module) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
	if (module->frequency<SX1276_FREQ_525MHZ)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <SX1276_standby+0x38>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d805      	bhi.n	8001dbe <SX1276_standby+0x1e>
	SX1276_SPIWrite(module, LR_RegOpMode, 0x89);
 8001db2:	2289      	movs	r2, #137	; 0x89
 8001db4:	2101      	movs	r1, #1
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff fe99 	bl	8001aee <SX1276_SPIWrite>
 8001dbc:	e004      	b.n	8001dc8 <SX1276_standby+0x28>
	else
	SX1276_SPIWrite(module, LR_RegOpMode, 0x81);
 8001dbe:	2281      	movs	r2, #129	; 0x81
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff fe93 	bl	8001aee <SX1276_SPIWrite>
	module->status = STANDBY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2202      	movs	r2, #2
 8001dcc:	741a      	strb	r2, [r3, #16]
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	00834015 	.word	0x00834015

08001ddc <SX1276_sleep>:

void SX1276_sleep(SX1276_t * module) {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
	if (module->frequency<SX1276_FREQ_525MHZ)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <SX1276_sleep+0x38>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d805      	bhi.n	8001dfa <SX1276_sleep+0x1e>
	SX1276_SPIWrite(module, LR_RegOpMode, 0x88);
 8001dee:	2288      	movs	r2, #136	; 0x88
 8001df0:	2101      	movs	r1, #1
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff fe7b 	bl	8001aee <SX1276_SPIWrite>
 8001df8:	e004      	b.n	8001e04 <SX1276_sleep+0x28>
	else
	SX1276_SPIWrite(module, LR_RegOpMode, 0x80);
 8001dfa:	2280      	movs	r2, #128	; 0x80
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff fe75 	bl	8001aee <SX1276_SPIWrite>
	module->status = SLEEP;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	741a      	strb	r2, [r3, #16]
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	00834015 	.word	0x00834015

08001e18 <SX1276_clearIrq>:

void SX1276_clearIrq(SX1276_t * module) {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
	SX1276_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8001e20:	22ff      	movs	r2, #255	; 0xff
 8001e22:	2112      	movs	r1, #18
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff fe62 	bl	8001aee <SX1276_SPIWrite>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <SX1276_startRx>:

int SX1276_startRx(SX1276_t * module, uint32_t timeout) {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
	uint8_t addr;
	SX1276_config(module);		//Setting base parameter
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff fedc 	bl	8001bfc <SX1276_config>
	SX1276_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8001e44:	2284      	movs	r2, #132	; 0x84
 8001e46:	214d      	movs	r1, #77	; 0x4d
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7ff fe50 	bl	8001aee <SX1276_SPIWrite>
	SX1276_SPIWrite(module, LR_RegHopPeriod, 0x00);	//No FHSS
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2124      	movs	r1, #36	; 0x24
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff fe4b 	bl	8001aee <SX1276_SPIWrite>
	SX1276_clearIrq(module);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff ffdd 	bl	8001e18 <SX1276_clearIrq>
	SX1276_SPIWrite(module, LR_RegPayloadLength, module->len);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	7a1b      	ldrb	r3, [r3, #8]
 8001e62:	461a      	mov	r2, r3
 8001e64:	2122      	movs	r1, #34	; 0x22
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff fe41 	bl	8001aee <SX1276_SPIWrite>
	addr = SX1276_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8001e6c:	210f      	movs	r1, #15
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff fe24 	bl	8001abc <SX1276_SPIRead>
 8001e74:	4603      	mov	r3, r0
 8001e76:	73fb      	strb	r3, [r7, #15]
	SX1276_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	210d      	movs	r1, #13
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff fe35 	bl	8001aee <SX1276_SPIWrite>
	if (module->frequency<SX1276_FREQ_525MHZ)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a1a      	ldr	r2, [pc, #104]	; (8001ef4 <SX1276_startRx+0xc0>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d805      	bhi.n	8001e9a <SX1276_startRx+0x66>
	SX1276_SPIWrite(module, LR_RegOpMode, 0x8d);	//Cont RX Mode + LF
 8001e8e:	228d      	movs	r2, #141	; 0x8d
 8001e90:	2101      	movs	r1, #1
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff fe2b 	bl	8001aee <SX1276_SPIWrite>
 8001e98:	e004      	b.n	8001ea4 <SX1276_startRx+0x70>
	else
	SX1276_SPIWrite(module, LR_RegOpMode,0x85);	    //Cont RX Mode + HF
 8001e9a:	2285      	movs	r2, #133	; 0x85
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff fe25 	bl	8001aee <SX1276_SPIWrite>
	module->readBytes = 0;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

	while (1) {
		if ((SX1276_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8001eac:	2118      	movs	r1, #24
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff fe04 	bl	8001abc <SX1276_SPIRead>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	f003 0304 	and.w	r3, r3, #4
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	d104      	bne.n	8001ec8 <SX1276_startRx+0x94>
			module->status = RX;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2204      	movs	r2, #4
 8001ec2:	741a      	strb	r2, [r3, #16]
			return 1;}
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e011      	b.n	8001eec <SX1276_startRx+0xb8>

		if (--timeout == 0) {
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	603b      	str	r3, [r7, #0]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d107      	bne.n	8001ee4 <SX1276_startRx+0xb0>
			SX1276_Reset(module);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff fd88 	bl	80019ea <SX1276_Reset>
			SX1276_config(module);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff fe8e 	bl	8001bfc <SX1276_config>
			return 0;}
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	e003      	b.n	8001eec <SX1276_startRx+0xb8>

		HAL_Delay(1);}
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	f7fe f993 	bl	8000210 <HAL_Delay>
		if ((SX1276_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8001eea:	e7df      	b.n	8001eac <SX1276_startRx+0x78>
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	00834015 	.word	0x00834015

08001ef8 <SX1276_transmit>:
	}
}


int SX1276_transmit(SX1276_t * module, uint8_t* txBuffer, uint8_t length,
uint32_t timeout) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	603b      	str	r3, [r7, #0]
 8001f04:	4613      	mov	r3, r2
 8001f06:	71fb      	strb	r3, [r7, #7]
	module->status=TX;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	741a      	strb	r2, [r3, #16]
	SX1276_SPIBurstWrite(module, 0x00, txBuffer, length);
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	68ba      	ldr	r2, [r7, #8]
 8001f12:	2100      	movs	r1, #0
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f7ff fe3c 	bl	8001b92 <SX1276_SPIBurstWrite>

	if (module->frequency<SX1276_FREQ_525MHZ)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a1b      	ldr	r2, [pc, #108]	; (8001f8c <SX1276_transmit+0x94>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d805      	bhi.n	8001f30 <SX1276_transmit+0x38>
	SX1276_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode LF
 8001f24:	228b      	movs	r2, #139	; 0x8b
 8001f26:	2101      	movs	r1, #1
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f7ff fde0 	bl	8001aee <SX1276_SPIWrite>
 8001f2e:	e004      	b.n	8001f3a <SX1276_transmit+0x42>
	else
	SX1276_SPIWrite(module, LR_RegOpMode, 0x83);	//Tx Mode HF
 8001f30:	2283      	movs	r2, #131	; 0x83
 8001f32:	2101      	movs	r1, #1
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f7ff fdda 	bl	8001aee <SX1276_SPIWrite>

	while (1) {
		SX1276_readIrq(module);
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f000 f93a 	bl	80021b4 <SX1276_readIrq>
		if (module->irq&IRQ_TX_DONE) {
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d007      	beq.n	8001f5e <SX1276_transmit+0x66>
			SX1276_clearIrq(module);
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f7ff ff62 	bl	8001e18 <SX1276_clearIrq>
			SX1276_standby(module);
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f7ff ff23 	bl	8001da0 <SX1276_standby>
			return true;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e011      	b.n	8001f82 <SX1276_transmit+0x8a>
		}

		if (--timeout == 0) {
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	3b01      	subs	r3, #1
 8001f62:	603b      	str	r3, [r7, #0]
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d107      	bne.n	8001f7a <SX1276_transmit+0x82>
			SX1276_Reset(module);
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f7ff fd3d 	bl	80019ea <SX1276_Reset>
			SX1276_config(module);
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f7ff fe43 	bl	8001bfc <SX1276_config>
			return false;
 8001f76:	2300      	movs	r3, #0
 8001f78:	e003      	b.n	8001f82 <SX1276_transmit+0x8a>
		}
		HAL_Delay(1);
 8001f7a:	2001      	movs	r0, #1
 8001f7c:	f7fe f948 	bl	8000210 <HAL_Delay>
		SX1276_readIrq(module);
 8001f80:	e7db      	b.n	8001f3a <SX1276_transmit+0x42>
	}
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	00834015 	.word	0x00834015

08001f90 <SX1276_receive>:


uint8_t SX1276_receive(SX1276_t * module) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;
	memset(module->rxBuf, 0x00, SX1276_MAX_PACKET);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	331d      	adds	r3, #29
 8001f9c:	2220      	movs	r2, #32
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 fbf1 	bl	8002788 <memset>

	addr = SX1276_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8001fa6:	2110      	movs	r1, #16
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff fd87 	bl	8001abc <SX1276_SPIRead>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	73bb      	strb	r3, [r7, #14]
	SX1276_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8001fb2:	7bbb      	ldrb	r3, [r7, #14]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	210d      	movs	r1, #13
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff fd98 	bl	8001aee <SX1276_SPIWrite>
	if (module->sf == SX1276_LORA_SF_6)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	795b      	ldrb	r3, [r3, #5]
 8001fc2:	2b06      	cmp	r3, #6
 8001fc4:	d103      	bne.n	8001fce <SX1276_receive+0x3e>
	packet_size = module->len;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	7a1b      	ldrb	r3, [r3, #8]
 8001fca:	73fb      	strb	r3, [r7, #15]
 8001fcc:	e005      	b.n	8001fda <SX1276_receive+0x4a>
	else
	packet_size = SX1276_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8001fce:	2113      	movs	r1, #19
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff fd73 	bl	8001abc <SX1276_SPIRead>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	73fb      	strb	r3, [r7, #15]
	SX1276_SPIBurstRead(module, 0x00, module->rxBuf, packet_size);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f103 021d 	add.w	r2, r3, #29
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff fda3 	bl	8001b30 <SX1276_SPIBurstRead>
	module->readBytes = packet_size;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	7bfa      	ldrb	r2, [r7, #15]
 8001fee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	return module->readBytes;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <SX1276_transmit_it>:



void SX1276_transmit_it(SX1276_t* module) {
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
	uint8_t addr;
	SX1276_config(module); //setting base parameter
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff fdf7 	bl	8001bfc <SX1276_config>
	module->status=TX;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2203      	movs	r2, #3
 8002012:	741a      	strb	r2, [r3, #16]
	SX1276_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8002014:	2287      	movs	r2, #135	; 0x87
 8002016:	214d      	movs	r1, #77	; 0x4d
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff fd68 	bl	8001aee <SX1276_SPIWrite>
	SX1276_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 800201e:	2200      	movs	r2, #0
 8002020:	2124      	movs	r1, #36	; 0x24
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff fd63 	bl	8001aee <SX1276_SPIWrite>
	SX1276_clearIrq(module);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff fef5 	bl	8001e18 <SX1276_clearIrq>
	SX1276_SPIWrite(module, LR_RegPayloadLength, module->len); //RegPayloadLength 21byte
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	7a1b      	ldrb	r3, [r3, #8]
 8002032:	461a      	mov	r2, r3
 8002034:	2122      	movs	r1, #34	; 0x22
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff fd59 	bl	8001aee <SX1276_SPIWrite>
	addr = SX1276_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 800203c:	210e      	movs	r1, #14
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff fd3c 	bl	8001abc <SX1276_SPIRead>
 8002044:	4603      	mov	r3, r0
 8002046:	73fb      	strb	r3, [r7, #15]
	SX1276_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	461a      	mov	r2, r3
 800204c:	210d      	movs	r1, #13
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff fd4d 	bl	8001aee <SX1276_SPIWrite>
	SX1276_SPIBurstWrite(module, 0x00, module->txBuf, module->len);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f103 023d 	add.w	r2, r3, #61	; 0x3d
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	7a1b      	ldrb	r3, [r3, #8]
 800205e:	2100      	movs	r1, #0
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff fd96 	bl	8001b92 <SX1276_SPIBurstWrite>
	module->lastTransTick=HAL_GetTick();
 8002066:	f7fe f8c9 	bl	80001fc <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	619a      	str	r2, [r3, #24]
	if (module->frequency<SX1276_FREQ_525MHZ)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a0b      	ldr	r2, [pc, #44]	; (80020a4 <SX1276_transmit_it+0xa4>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d805      	bhi.n	8002086 <SX1276_transmit_it+0x86>
	SX1276_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode LF
 800207a:	228b      	movs	r2, #139	; 0x8b
 800207c:	2101      	movs	r1, #1
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff fd35 	bl	8001aee <SX1276_SPIWrite>
 8002084:	e004      	b.n	8002090 <SX1276_transmit_it+0x90>
	else
	SX1276_SPIWrite(module, LR_RegOpMode, 0x83);	//Tx Mode HF
 8002086:	2283      	movs	r2, #131	; 0x83
 8002088:	2101      	movs	r1, #1
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff fd2f 	bl	8001aee <SX1276_SPIWrite>
	module->TXrequest=0;
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	7c53      	ldrb	r3, [r2, #17]
 8002094:	f36f 0300 	bfc	r3, #0, #1
 8002098:	7453      	strb	r3, [r2, #17]


}
 800209a:	bf00      	nop
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	00834015 	.word	0x00834015

080020a8 <SX1276_activity>:
	return HAL_ERROR;
}


void SX1276_activity(SX1276_t* module)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
    SX1276_readStatus(module);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 f85b 	bl	800216c <SX1276_readStatus>
    SX1276_readIrq(module);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f87c 	bl	80021b4 <SX1276_readIrq>

	if (module->status==UNINITIALISED)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	7c1b      	ldrb	r3, [r3, #16]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d102      	bne.n	80020ca <SX1276_activity+0x22>
		SX1276_config(module);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff fd99 	bl	8001bfc <SX1276_config>

	if ((module->status==SLEEP || module->status==STANDBY) && module->alwaysRX)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	7c1b      	ldrb	r3, [r3, #16]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d003      	beq.n	80020da <SX1276_activity+0x32>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	7c1b      	ldrb	r3, [r3, #16]
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d107      	bne.n	80020ea <SX1276_activity+0x42>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	7bdb      	ldrb	r3, [r3, #15]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <SX1276_activity+0x42>
		SX1276_startRx(module, 100);
 80020e2:	2164      	movs	r1, #100	; 0x64
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff fea5 	bl	8001e34 <SX1276_startRx>

	if (module->TXrequest && (module->modemStatus&MODEM_STATUS_SIG_DET)==0)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	7c5b      	ldrb	r3, [r3, #17]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d009      	beq.n	800210c <SX1276_activity+0x64>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d102      	bne.n	800210c <SX1276_activity+0x64>
		SX1276_transmit_it(module);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff ff7a 	bl	8002000 <SX1276_transmit_it>

	SX1276_readIrq(module);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 f851 	bl	80021b4 <SX1276_readIrq>
		if (module->irq & IRQ_TX_DONE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8002118:	f003 0308 	and.w	r3, r3, #8
 800211c:	2b00      	cmp	r3, #0
 800211e:	d006      	beq.n	800212e <SX1276_activity+0x86>
		{
			SX1276_clearIrq(module);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff fe79 	bl	8001e18 <SX1276_clearIrq>
			SX1276_startRx(module, 100);
 8002126:	2164      	movs	r1, #100	; 0x64
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff fe83 	bl	8001e34 <SX1276_startRx>
		}

		if (module->irq & IRQ_RX_DONE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8002134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002138:	2b00      	cmp	r3, #0
 800213a:	d013      	beq.n	8002164 <SX1276_activity+0xbc>
		{
			module->badCrc=(module->irq&IRQ_CRC_ERROR)>>5;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8002142:	115b      	asrs	r3, r3, #5
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b00      	cmp	r3, #0
 800214a:	bf14      	ite	ne
 800214c:	2301      	movne	r3, #1
 800214e:	2300      	moveq	r3, #0
 8002150:	b2da      	uxtb	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			SX1276_receive(module);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7ff ff19 	bl	8001f90 <SX1276_receive>
			SX1276_clearIrq(module);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7ff fe5a 	bl	8001e18 <SX1276_clearIrq>
		}

}
 8002164:	bf00      	nop
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <SX1276_readStatus>:
	else
	return ret*-1;
}

void SX1276_readStatus(SX1276_t * module)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
module->modemStatus = SX1276_SPIRead(module, LR_RegModemStat);
 8002174:	2118      	movs	r1, #24
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff fca0 	bl	8001abc <SX1276_SPIRead>
 800217c:	4603      	mov	r3, r0
 800217e:	461a      	mov	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
if (module->modemStatus & MODEM_STATUS_SIG_DET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	2b00      	cmp	r3, #0
 8002192:	d008      	beq.n	80021a6 <SX1276_readStatus+0x3a>
{
	module->signalDetected=true;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	771a      	strb	r2, [r3, #28]
	module->lastRX=HAL_GetTick();
 800219a:	f7fe f82f 	bl	80001fc <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	615a      	str	r2, [r3, #20]
}
else
	module->signalDetected=false;
}
 80021a4:	e002      	b.n	80021ac <SX1276_readStatus+0x40>
	module->signalDetected=false;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	771a      	strb	r2, [r3, #28]
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <SX1276_readIrq>:

void SX1276_readIrq(SX1276_t * module)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
module->irq = SX1276_SPIRead(module, LR_RegIrqFlags);
 80021bc:	2112      	movs	r1, #18
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7ff fc7c 	bl	8001abc <SX1276_SPIRead>
 80021c4:	4603      	mov	r3, r0
 80021c6:	461a      	mov	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <SX1276_init>:
{
return SX1276_SPIRead(module, LR_RegWideBandRSSI);
}

void SX1276_init(SX1276_t* module)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
HAL_GPIO_WritePin(module->reset.port, module->reset.pin, GPIO_PIN_SET);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	2201      	movs	r2, #1
 80021ea:	4619      	mov	r1, r3
 80021ec:	f7fe fa74 	bl	80006d8 <HAL_GPIO_WritePin>
HAL_Delay(10);
 80021f0:	200a      	movs	r0, #10
 80021f2:	f7fe f80d 	bl	8000210 <HAL_Delay>
module->revision=SX1276_SPIRead(module, REG_LR_VERSION);
 80021f6:	2142      	movs	r1, #66	; 0x42
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff fc5f 	bl	8001abc <SX1276_SPIRead>
 80021fe:	4603      	mov	r3, r0
 8002200:	461a      	mov	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
module->revision=SX1276_SPIRead(module, REG_LR_VERSION);
 8002208:	2142      	movs	r1, #66	; 0x42
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7ff fc56 	bl	8001abc <SX1276_SPIRead>
 8002210:	4603      	mov	r3, r0
 8002212:	461a      	mov	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <main>:
/**
* @brief  The application entry point.
* @retval int
*/
int main(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002228:	f7fd ff90 	bl	800014c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800222c:	f000 f846 	bl	80022bc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002230:	f000 f8e0 	bl	80023f4 <MX_GPIO_Init>
	MX_SPI1_Init();
 8002234:	f000 f87e 	bl	8002334 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8002238:	f000 f8b2 	bl	80023a0 <MX_USART1_UART_Init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	SX1276_config(&myRadio1);
 800223c:	481b      	ldr	r0, [pc, #108]	; (80022ac <main+0x88>)
 800223e:	f7ff fcdd 	bl	8001bfc <SX1276_config>
	SX1276_config(&myRadio2);
 8002242:	481b      	ldr	r0, [pc, #108]	; (80022b0 <main+0x8c>)
 8002244:	f7ff fcda 	bl	8001bfc <SX1276_config>
	SX1276_init(&myRadio1);
 8002248:	4818      	ldr	r0, [pc, #96]	; (80022ac <main+0x88>)
 800224a:	f7ff ffc4 	bl	80021d6 <SX1276_init>
	SX1276_init(&myRadio2);
 800224e:	4818      	ldr	r0, [pc, #96]	; (80022b0 <main+0x8c>)
 8002250:	f7ff ffc1 	bl	80021d6 <SX1276_init>

	while (1)
	{
		SX1276_activity(&myRadio1);
 8002254:	4815      	ldr	r0, [pc, #84]	; (80022ac <main+0x88>)
 8002256:	f7ff ff27 	bl	80020a8 <SX1276_activity>
		SX1276_activity(&myRadio2);
 800225a:	4815      	ldr	r0, [pc, #84]	; (80022b0 <main+0x8c>)
 800225c:	f7ff ff24 	bl	80020a8 <SX1276_activity>
		if (myRadio1.readBytes>0)
 8002260:	4b12      	ldr	r3, [pc, #72]	; (80022ac <main+0x88>)
 8002262:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00c      	beq.n	8002284 <main+0x60>
		{
			SX1276_transmit(&myRadio2, myRadio1.rxBuf, myRadio1.readBytes, 1000);
 800226a:	4b10      	ldr	r3, [pc, #64]	; (80022ac <main+0x88>)
 800226c:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 8002270:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002274:	490f      	ldr	r1, [pc, #60]	; (80022b4 <main+0x90>)
 8002276:	480e      	ldr	r0, [pc, #56]	; (80022b0 <main+0x8c>)
 8002278:	f7ff fe3e 	bl	8001ef8 <SX1276_transmit>
			myRadio1.readBytes=0;
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <main+0x88>)
 800227e:	2200      	movs	r2, #0
 8002280:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		}
		if (myRadio2.readBytes>0)
 8002284:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <main+0x8c>)
 8002286:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0e2      	beq.n	8002254 <main+0x30>
		{
			SX1276_transmit(&myRadio1, myRadio2.rxBuf, myRadio2.readBytes, 1000);
 800228e:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <main+0x8c>)
 8002290:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 8002294:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002298:	4907      	ldr	r1, [pc, #28]	; (80022b8 <main+0x94>)
 800229a:	4804      	ldr	r0, [pc, #16]	; (80022ac <main+0x88>)
 800229c:	f7ff fe2c 	bl	8001ef8 <SX1276_transmit>
			myRadio2.readBytes=0;
 80022a0:	4b03      	ldr	r3, [pc, #12]	; (80022b0 <main+0x8c>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		SX1276_activity(&myRadio1);
 80022a8:	e7d4      	b.n	8002254 <main+0x30>
 80022aa:	bf00      	nop
 80022ac:	20000184 	.word	0x20000184
 80022b0:	20000048 	.word	0x20000048
 80022b4:	200001a1 	.word	0x200001a1
 80022b8:	20000065 	.word	0x20000065

080022bc <SystemClock_Config>:
/**
* @brief System Clock Configuration
* @retval None
*/
void SystemClock_Config(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b090      	sub	sp, #64	; 0x40
 80022c0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022c2:	f107 0318 	add.w	r3, r7, #24
 80022c6:	2228      	movs	r2, #40	; 0x28
 80022c8:	2100      	movs	r1, #0
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 fa5c 	bl	8002788 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022d0:	1d3b      	adds	r3, r7, #4
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	609a      	str	r2, [r3, #8]
 80022da:	60da      	str	r2, [r3, #12]
 80022dc:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022de:	2302      	movs	r3, #2
 80022e0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022e2:	2301      	movs	r3, #1
 80022e4:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022e6:	2310      	movs	r3, #16
 80022e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022ee:	f107 0318 	add.w	r3, r7, #24
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7fe fa08 	bl	8000708 <HAL_RCC_OscConfig>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <SystemClock_Config+0x46>
	{
		Error_Handler();
 80022fe:	f000 f8cd 	bl	800249c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002302:	230f      	movs	r3, #15
 8002304:	607b      	str	r3, [r7, #4]
	|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002306:	2300      	movs	r3, #0
 8002308:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002316:	1d3b      	adds	r3, r7, #4
 8002318:	2100      	movs	r1, #0
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe fc58 	bl	8000bd0 <HAL_RCC_ClockConfig>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <SystemClock_Config+0x6e>
	{
		Error_Handler();
 8002326:	f000 f8b9 	bl	800249c <Error_Handler>
	}
}
 800232a:	bf00      	nop
 800232c:	3740      	adds	r7, #64	; 0x40
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <MX_SPI1_Init>:
* @brief SPI1 Initialization Function
* @param None
* @retval None
*/
static void MX_SPI1_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8002338:	4b17      	ldr	r3, [pc, #92]	; (8002398 <MX_SPI1_Init+0x64>)
 800233a:	4a18      	ldr	r2, [pc, #96]	; (800239c <MX_SPI1_Init+0x68>)
 800233c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800233e:	4b16      	ldr	r3, [pc, #88]	; (8002398 <MX_SPI1_Init+0x64>)
 8002340:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002344:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002346:	4b14      	ldr	r3, [pc, #80]	; (8002398 <MX_SPI1_Init+0x64>)
 8002348:	2200      	movs	r2, #0
 800234a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800234c:	4b12      	ldr	r3, [pc, #72]	; (8002398 <MX_SPI1_Init+0x64>)
 800234e:	2200      	movs	r2, #0
 8002350:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002352:	4b11      	ldr	r3, [pc, #68]	; (8002398 <MX_SPI1_Init+0x64>)
 8002354:	2200      	movs	r2, #0
 8002356:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002358:	4b0f      	ldr	r3, [pc, #60]	; (8002398 <MX_SPI1_Init+0x64>)
 800235a:	2200      	movs	r2, #0
 800235c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800235e:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <MX_SPI1_Init+0x64>)
 8002360:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002364:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002366:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <MX_SPI1_Init+0x64>)
 8002368:	2210      	movs	r2, #16
 800236a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800236c:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <MX_SPI1_Init+0x64>)
 800236e:	2200      	movs	r2, #0
 8002370:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002372:	4b09      	ldr	r3, [pc, #36]	; (8002398 <MX_SPI1_Init+0x64>)
 8002374:	2200      	movs	r2, #0
 8002376:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002378:	4b07      	ldr	r3, [pc, #28]	; (8002398 <MX_SPI1_Init+0x64>)
 800237a:	2200      	movs	r2, #0
 800237c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800237e:	4b06      	ldr	r3, [pc, #24]	; (8002398 <MX_SPI1_Init+0x64>)
 8002380:	220a      	movs	r2, #10
 8002382:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002384:	4804      	ldr	r0, [pc, #16]	; (8002398 <MX_SPI1_Init+0x64>)
 8002386:	f7ff f952 	bl	800162e <HAL_SPI_Init>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8002390:	f000 f884 	bl	800249c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8002394:	bf00      	nop
 8002396:	bd80      	pop	{r7, pc}
 8002398:	2000012c 	.word	0x2000012c
 800239c:	40013000 	.word	0x40013000

080023a0 <MX_USART1_UART_Init>:
* @brief USART1 Initialization Function
* @param None
* @retval None
*/
static void MX_USART1_UART_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80023a4:	4b11      	ldr	r3, [pc, #68]	; (80023ec <MX_USART1_UART_Init+0x4c>)
 80023a6:	4a12      	ldr	r2, [pc, #72]	; (80023f0 <MX_USART1_UART_Init+0x50>)
 80023a8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80023aa:	4b10      	ldr	r3, [pc, #64]	; (80023ec <MX_USART1_UART_Init+0x4c>)
 80023ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80023b0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023b2:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <MX_USART1_UART_Init+0x4c>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80023b8:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <MX_USART1_UART_Init+0x4c>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80023be:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <MX_USART1_UART_Init+0x4c>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80023c4:	4b09      	ldr	r3, [pc, #36]	; (80023ec <MX_USART1_UART_Init+0x4c>)
 80023c6:	220c      	movs	r2, #12
 80023c8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ca:	4b08      	ldr	r3, [pc, #32]	; (80023ec <MX_USART1_UART_Init+0x4c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023d0:	4b06      	ldr	r3, [pc, #24]	; (80023ec <MX_USART1_UART_Init+0x4c>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80023d6:	4805      	ldr	r0, [pc, #20]	; (80023ec <MX_USART1_UART_Init+0x4c>)
 80023d8:	f7ff f98e 	bl	80016f8 <HAL_UART_Init>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 80023e2:	f000 f85b 	bl	800249c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	200000c4 	.word	0x200000c4
 80023f0:	40013800 	.word	0x40013800

080023f4 <MX_GPIO_Init>:
* @brief GPIO Initialization Function
* @param None
* @retval None
*/
static void MX_GPIO_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023fa:	f107 0308 	add.w	r3, r7, #8
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	605a      	str	r2, [r3, #4]
 8002404:	609a      	str	r2, [r3, #8]
 8002406:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002408:	4b21      	ldr	r3, [pc, #132]	; (8002490 <MX_GPIO_Init+0x9c>)
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	4a20      	ldr	r2, [pc, #128]	; (8002490 <MX_GPIO_Init+0x9c>)
 800240e:	f043 0304 	orr.w	r3, r3, #4
 8002412:	6193      	str	r3, [r2, #24]
 8002414:	4b1e      	ldr	r3, [pc, #120]	; (8002490 <MX_GPIO_Init+0x9c>)
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	607b      	str	r3, [r7, #4]
 800241e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002420:	4b1b      	ldr	r3, [pc, #108]	; (8002490 <MX_GPIO_Init+0x9c>)
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	4a1a      	ldr	r2, [pc, #104]	; (8002490 <MX_GPIO_Init+0x9c>)
 8002426:	f043 0308 	orr.w	r3, r3, #8
 800242a:	6193      	str	r3, [r2, #24]
 800242c:	4b18      	ldr	r3, [pc, #96]	; (8002490 <MX_GPIO_Init+0x9c>)
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	603b      	str	r3, [r7, #0]
 8002436:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LED2_Pin|NSS2_Pin|RESET2_Pin|RESET1_Pin
 8002438:	2200      	movs	r2, #0
 800243a:	211f      	movs	r1, #31
 800243c:	4815      	ldr	r0, [pc, #84]	; (8002494 <MX_GPIO_Init+0xa0>)
 800243e:	f7fe f94b 	bl	80006d8 <HAL_GPIO_WritePin>
	|NSS1_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002442:	2200      	movs	r2, #0
 8002444:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002448:	4813      	ldr	r0, [pc, #76]	; (8002498 <MX_GPIO_Init+0xa4>)
 800244a:	f7fe f945 	bl	80006d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LED2_Pin NSS2_Pin RESET2_Pin RESET1_Pin
						NSS1_Pin */
	GPIO_InitStruct.Pin = LED2_Pin|NSS2_Pin|RESET2_Pin|RESET1_Pin
 800244e:	231f      	movs	r3, #31
 8002450:	60bb      	str	r3, [r7, #8]
	|NSS1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002452:	2301      	movs	r3, #1
 8002454:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002456:	2300      	movs	r3, #0
 8002458:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245a:	2302      	movs	r3, #2
 800245c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245e:	f107 0308 	add.w	r3, r7, #8
 8002462:	4619      	mov	r1, r3
 8002464:	480b      	ldr	r0, [pc, #44]	; (8002494 <MX_GPIO_Init+0xa0>)
 8002466:	f7fd ffd9 	bl	800041c <HAL_GPIO_Init>

	/*Configure GPIO pin : LED1_Pin */
	GPIO_InitStruct.Pin = LED1_Pin;
 800246a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800246e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002470:	2301      	movs	r3, #1
 8002472:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002478:	2302      	movs	r3, #2
 800247a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800247c:	f107 0308 	add.w	r3, r7, #8
 8002480:	4619      	mov	r1, r3
 8002482:	4805      	ldr	r0, [pc, #20]	; (8002498 <MX_GPIO_Init+0xa4>)
 8002484:	f7fd ffca 	bl	800041c <HAL_GPIO_Init>

}
 8002488:	bf00      	nop
 800248a:	3718      	adds	r7, #24
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40021000 	.word	0x40021000
 8002494:	40010800 	.word	0x40010800
 8002498:	40010c00 	.word	0x40010c00

0800249c <Error_Handler>:
/**
* @brief  This function is executed in case of error occurrence.
* @retval None
*/
void Error_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80024a0:	bf00      	nop
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr

080024a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <HAL_MspInit+0x5c>)
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	4a14      	ldr	r2, [pc, #80]	; (8002504 <HAL_MspInit+0x5c>)
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	6193      	str	r3, [r2, #24]
 80024ba:	4b12      	ldr	r3, [pc, #72]	; (8002504 <HAL_MspInit+0x5c>)
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	60bb      	str	r3, [r7, #8]
 80024c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024c6:	4b0f      	ldr	r3, [pc, #60]	; (8002504 <HAL_MspInit+0x5c>)
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	4a0e      	ldr	r2, [pc, #56]	; (8002504 <HAL_MspInit+0x5c>)
 80024cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d0:	61d3      	str	r3, [r2, #28]
 80024d2:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <HAL_MspInit+0x5c>)
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024da:	607b      	str	r3, [r7, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80024de:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <HAL_MspInit+0x60>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	4a04      	ldr	r2, [pc, #16]	; (8002508 <HAL_MspInit+0x60>)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024fa:	bf00      	nop
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr
 8002504:	40021000 	.word	0x40021000
 8002508:	40010000 	.word	0x40010000

0800250c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b088      	sub	sp, #32
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002514:	f107 0310 	add.w	r3, r7, #16
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a1b      	ldr	r2, [pc, #108]	; (8002594 <HAL_SPI_MspInit+0x88>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d12f      	bne.n	800258c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800252c:	4b1a      	ldr	r3, [pc, #104]	; (8002598 <HAL_SPI_MspInit+0x8c>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	4a19      	ldr	r2, [pc, #100]	; (8002598 <HAL_SPI_MspInit+0x8c>)
 8002532:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002536:	6193      	str	r3, [r2, #24]
 8002538:	4b17      	ldr	r3, [pc, #92]	; (8002598 <HAL_SPI_MspInit+0x8c>)
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002544:	4b14      	ldr	r3, [pc, #80]	; (8002598 <HAL_SPI_MspInit+0x8c>)
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	4a13      	ldr	r2, [pc, #76]	; (8002598 <HAL_SPI_MspInit+0x8c>)
 800254a:	f043 0304 	orr.w	r3, r3, #4
 800254e:	6193      	str	r3, [r2, #24]
 8002550:	4b11      	ldr	r3, [pc, #68]	; (8002598 <HAL_SPI_MspInit+0x8c>)
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800255c:	23a0      	movs	r3, #160	; 0xa0
 800255e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002560:	2302      	movs	r3, #2
 8002562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002564:	2303      	movs	r3, #3
 8002566:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002568:	f107 0310 	add.w	r3, r7, #16
 800256c:	4619      	mov	r1, r3
 800256e:	480b      	ldr	r0, [pc, #44]	; (800259c <HAL_SPI_MspInit+0x90>)
 8002570:	f7fd ff54 	bl	800041c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002574:	2340      	movs	r3, #64	; 0x40
 8002576:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257c:	2300      	movs	r3, #0
 800257e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002580:	f107 0310 	add.w	r3, r7, #16
 8002584:	4619      	mov	r1, r3
 8002586:	4805      	ldr	r0, [pc, #20]	; (800259c <HAL_SPI_MspInit+0x90>)
 8002588:	f7fd ff48 	bl	800041c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800258c:	bf00      	nop
 800258e:	3720      	adds	r7, #32
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40013000 	.word	0x40013000
 8002598:	40021000 	.word	0x40021000
 800259c:	40010800 	.word	0x40010800

080025a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b088      	sub	sp, #32
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a8:	f107 0310 	add.w	r3, r7, #16
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a1c      	ldr	r2, [pc, #112]	; (800262c <HAL_UART_MspInit+0x8c>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d131      	bne.n	8002624 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025c0:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <HAL_UART_MspInit+0x90>)
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	4a1a      	ldr	r2, [pc, #104]	; (8002630 <HAL_UART_MspInit+0x90>)
 80025c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025ca:	6193      	str	r3, [r2, #24]
 80025cc:	4b18      	ldr	r3, [pc, #96]	; (8002630 <HAL_UART_MspInit+0x90>)
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d8:	4b15      	ldr	r3, [pc, #84]	; (8002630 <HAL_UART_MspInit+0x90>)
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	4a14      	ldr	r2, [pc, #80]	; (8002630 <HAL_UART_MspInit+0x90>)
 80025de:	f043 0304 	orr.w	r3, r3, #4
 80025e2:	6193      	str	r3, [r2, #24]
 80025e4:	4b12      	ldr	r3, [pc, #72]	; (8002630 <HAL_UART_MspInit+0x90>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80025f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f6:	2302      	movs	r3, #2
 80025f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025fa:	2303      	movs	r3, #3
 80025fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fe:	f107 0310 	add.w	r3, r7, #16
 8002602:	4619      	mov	r1, r3
 8002604:	480b      	ldr	r0, [pc, #44]	; (8002634 <HAL_UART_MspInit+0x94>)
 8002606:	f7fd ff09 	bl	800041c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800260a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800260e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002618:	f107 0310 	add.w	r3, r7, #16
 800261c:	4619      	mov	r1, r3
 800261e:	4805      	ldr	r0, [pc, #20]	; (8002634 <HAL_UART_MspInit+0x94>)
 8002620:	f7fd fefc 	bl	800041c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002624:	bf00      	nop
 8002626:	3720      	adds	r7, #32
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40013800 	.word	0x40013800
 8002630:	40021000 	.word	0x40021000
 8002634:	40010800 	.word	0x40010800

08002638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800263c:	bf00      	nop
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr

08002644 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002648:	e7fe      	b.n	8002648 <HardFault_Handler+0x4>

0800264a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800264a:	b480      	push	{r7}
 800264c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800264e:	e7fe      	b.n	800264e <MemManage_Handler+0x4>

08002650 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002654:	e7fe      	b.n	8002654 <BusFault_Handler+0x4>

08002656 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002656:	b480      	push	{r7}
 8002658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800265a:	e7fe      	b.n	800265a <UsageFault_Handler+0x4>

0800265c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002660:	bf00      	nop
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr

08002668 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002678:	bf00      	nop
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr

08002680 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002684:	f7fd fda8 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002688:	bf00      	nop
 800268a:	bd80      	pop	{r7, pc}

0800268c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002690:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <SystemInit+0x5c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a14      	ldr	r2, [pc, #80]	; (80026e8 <SystemInit+0x5c>)
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800269c:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <SystemInit+0x5c>)
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	4911      	ldr	r1, [pc, #68]	; (80026e8 <SystemInit+0x5c>)
 80026a2:	4b12      	ldr	r3, [pc, #72]	; (80026ec <SystemInit+0x60>)
 80026a4:	4013      	ands	r3, r2
 80026a6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80026a8:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <SystemInit+0x5c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a0e      	ldr	r2, [pc, #56]	; (80026e8 <SystemInit+0x5c>)
 80026ae:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80026b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80026b8:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <SystemInit+0x5c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a0a      	ldr	r2, [pc, #40]	; (80026e8 <SystemInit+0x5c>)
 80026be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026c2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80026c4:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <SystemInit+0x5c>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	4a07      	ldr	r2, [pc, #28]	; (80026e8 <SystemInit+0x5c>)
 80026ca:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80026ce:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80026d0:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <SystemInit+0x5c>)
 80026d2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80026d6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80026d8:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <SystemInit+0x64>)
 80026da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026de:	609a      	str	r2, [r3, #8]
#endif 
}
 80026e0:	bf00      	nop
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr
 80026e8:	40021000 	.word	0x40021000
 80026ec:	f8ff0000 	.word	0xf8ff0000
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80026f4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80026f6:	e003      	b.n	8002700 <LoopCopyDataInit>

080026f8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80026f8:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80026fa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80026fc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80026fe:	3104      	adds	r1, #4

08002700 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002700:	480a      	ldr	r0, [pc, #40]	; (800272c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002702:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002704:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002706:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002708:	d3f6      	bcc.n	80026f8 <CopyDataInit>
  ldr r2, =_sbss
 800270a:	4a0a      	ldr	r2, [pc, #40]	; (8002734 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800270c:	e002      	b.n	8002714 <LoopFillZerobss>

0800270e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800270e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002710:	f842 3b04 	str.w	r3, [r2], #4

08002714 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002714:	4b08      	ldr	r3, [pc, #32]	; (8002738 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002716:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002718:	d3f9      	bcc.n	800270e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800271a:	f7ff ffb7 	bl	800268c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800271e:	f000 f80f 	bl	8002740 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002722:	f7ff fd7f 	bl	8002224 <main>
  bx lr
 8002726:	4770      	bx	lr
  ldr r3, =_sidata
 8002728:	080027e4 	.word	0x080027e4
  ldr r0, =_sdata
 800272c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002730:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8002734:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8002738:	20000200 	.word	0x20000200

0800273c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800273c:	e7fe      	b.n	800273c <ADC1_2_IRQHandler>
	...

08002740 <__libc_init_array>:
 8002740:	b570      	push	{r4, r5, r6, lr}
 8002742:	2500      	movs	r5, #0
 8002744:	4e0c      	ldr	r6, [pc, #48]	; (8002778 <__libc_init_array+0x38>)
 8002746:	4c0d      	ldr	r4, [pc, #52]	; (800277c <__libc_init_array+0x3c>)
 8002748:	1ba4      	subs	r4, r4, r6
 800274a:	10a4      	asrs	r4, r4, #2
 800274c:	42a5      	cmp	r5, r4
 800274e:	d109      	bne.n	8002764 <__libc_init_array+0x24>
 8002750:	f000 f822 	bl	8002798 <_init>
 8002754:	2500      	movs	r5, #0
 8002756:	4e0a      	ldr	r6, [pc, #40]	; (8002780 <__libc_init_array+0x40>)
 8002758:	4c0a      	ldr	r4, [pc, #40]	; (8002784 <__libc_init_array+0x44>)
 800275a:	1ba4      	subs	r4, r4, r6
 800275c:	10a4      	asrs	r4, r4, #2
 800275e:	42a5      	cmp	r5, r4
 8002760:	d105      	bne.n	800276e <__libc_init_array+0x2e>
 8002762:	bd70      	pop	{r4, r5, r6, pc}
 8002764:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002768:	4798      	blx	r3
 800276a:	3501      	adds	r5, #1
 800276c:	e7ee      	b.n	800274c <__libc_init_array+0xc>
 800276e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002772:	4798      	blx	r3
 8002774:	3501      	adds	r5, #1
 8002776:	e7f2      	b.n	800275e <__libc_init_array+0x1e>
 8002778:	080027dc 	.word	0x080027dc
 800277c:	080027dc 	.word	0x080027dc
 8002780:	080027dc 	.word	0x080027dc
 8002784:	080027e0 	.word	0x080027e0

08002788 <memset>:
 8002788:	4603      	mov	r3, r0
 800278a:	4402      	add	r2, r0
 800278c:	4293      	cmp	r3, r2
 800278e:	d100      	bne.n	8002792 <memset+0xa>
 8002790:	4770      	bx	lr
 8002792:	f803 1b01 	strb.w	r1, [r3], #1
 8002796:	e7f9      	b.n	800278c <memset+0x4>

08002798 <_init>:
 8002798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800279a:	bf00      	nop
 800279c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800279e:	bc08      	pop	{r3}
 80027a0:	469e      	mov	lr, r3
 80027a2:	4770      	bx	lr

080027a4 <_fini>:
 80027a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a6:	bf00      	nop
 80027a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027aa:	bc08      	pop	{r3}
 80027ac:	469e      	mov	lr, r3
 80027ae:	4770      	bx	lr
